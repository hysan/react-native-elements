{
    "docs": [
        {
            "location": "/", 
            "text": "React Native Elements\n\n\n\n\n\n  Cross Platform \nReact Native\n UI Toolkit\n\n\n\n\n\n  \n\n  \n\n  \n\n  \n\n  \n\n\n\n\n\n\n  \n\n  \n\n  \n\n  \n\n  \n\n\n\n\n\n\n\n\n\nGet Started\n\n\nInstallation\n\n\n\n\n\n\nIf you are using\n\ncreate-react-native-app\n\nor \nExpo\n, \nfollow these instructions\n.\n\n\n\n\n\n\nIf your project is a standard React Native project (if you have an\nios/android directory and created it with \nreact-native init\n), \nfollow these installation instructions\n.\n\n\n\n\n\n\nUsage\n\n\nStart using the components or try it on Snack \nhere\n.\n\n\nimport\n \n{\n \nButton\n \n}\n \nfrom\n \nreact-native-elements\n;\n\n\n\nButton\n \n/\n\n\n\n\n\nComponents Included\n\n\n\n\n \nButtons\n\n\n \nInput\n\n\n \nSocial Icons / Social Icon Buttons\n\n\n \nIcons\n\n\n \nForm Elements\n\n\n \nSearch Bar\n\n\n \nButtonGroup\n\n\n \nCheckboxes\n\n\n \nList Element\n\n\n \nBadge\n\n\n \nHTML style headings\n\n\n \nCard component\n\n\n \nPricing Component\n\n\n \nSlider Component\n\n\n \nTile Component\n\n\n \nAvatar Component\n\n\n \nRating Component\n\n\n\n\nDocumentation\n\n\nView the full docs here\n\n\nDemo App\n\n\nCheckout the official \nReact Native Elements App\n on Expo which uses all of the React Native Elements components.\n\n\nAdditionally, take a look at the \nexample/\n folder to view the implementation \n run the RNE expo app locally.\n\n\nBackers\n\n\nSupport us with a monthly donation and help us continue our activities. [\nBecome a backer\n]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSponsors\n\n\nBecome a sponsor and get your logo on our README on Github with a link to your site. [\nBecome a sponsor\n]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nRoadmap\n\n\nFirst Contributors\n\n\nLook for the label \ngood first issue\n on the issues. Click \nhere\n to see them.\n\n\n1.0 Release\n\n\n\n\n \nSearchBar - Platform Specific (with iOS 11 support)\n\n\n \nListItem - Platform Specific\n\n\n \nButton - Refactored\n\n\n \nInput - Rewritten\n\n\n \nCompatibility with react-native-web\n\n\n \nProduction-ready Screens\n\n\n\n\nNot Started\n\n\n\n\n \nAdd Notification Component\n\n\n \nAdd Image Component which supports parallax\n\n\n \nAdd DatePicker/Calendar Component\n\n\n Something you's like to see? Submit an \nissue\n or a \npull request\n\n\n\n\nContributing\n\n\nInterested in contributing to this repo? Check out our \nContributing Guide\n\n\nAlso come say \nHi!\n to the RNE community on our public \nSlack team\n. See you on the other side! :)", 
            "title": "Home"
        }, 
        {
            "location": "/#get-started", 
            "text": "", 
            "title": "Get Started"
        }, 
        {
            "location": "/#installation", 
            "text": "If you are using create-react-native-app \nor  Expo ,  follow these instructions .    If your project is a standard React Native project (if you have an\nios/android directory and created it with  react-native init ),  follow these installation instructions .", 
            "title": "Installation"
        }, 
        {
            "location": "/#usage", 
            "text": "Start using the components or try it on Snack  here .  import   {   Button   }   from   react-native-elements ;  Button   /", 
            "title": "Usage"
        }, 
        {
            "location": "/#components-included", 
            "text": "Buttons    Input    Social Icons / Social Icon Buttons    Icons    Form Elements    Search Bar    ButtonGroup    Checkboxes    List Element    Badge    HTML style headings    Card component    Pricing Component    Slider Component    Tile Component    Avatar Component    Rating Component", 
            "title": "Components Included"
        }, 
        {
            "location": "/#documentation", 
            "text": "View the full docs here", 
            "title": "Documentation"
        }, 
        {
            "location": "/#demo-app", 
            "text": "Checkout the official  React Native Elements App  on Expo which uses all of the React Native Elements components.  Additionally, take a look at the  example/  folder to view the implementation   run the RNE expo app locally.", 
            "title": "Demo App"
        }, 
        {
            "location": "/#backers", 
            "text": "Support us with a monthly donation and help us continue our activities. [ Become a backer ]", 
            "title": "Backers"
        }, 
        {
            "location": "/#sponsors", 
            "text": "Become a sponsor and get your logo on our README on Github with a link to your site. [ Become a sponsor ]", 
            "title": "Sponsors"
        }, 
        {
            "location": "/#roadmap", 
            "text": "", 
            "title": "Roadmap"
        }, 
        {
            "location": "/#first-contributors", 
            "text": "Look for the label  good first issue  on the issues. Click  here  to see them.", 
            "title": "First Contributors"
        }, 
        {
            "location": "/#10-release", 
            "text": "SearchBar - Platform Specific (with iOS 11 support)    ListItem - Platform Specific    Button - Refactored    Input - Rewritten    Compatibility with react-native-web    Production-ready Screens", 
            "title": "1.0 Release"
        }, 
        {
            "location": "/#not-started", 
            "text": "Add Notification Component    Add Image Component which supports parallax    Add DatePicker/Calendar Component   Something you's like to see? Submit an  issue  or a  pull request", 
            "title": "Not Started"
        }, 
        {
            "location": "/#contributing", 
            "text": "Interested in contributing to this repo? Check out our  Contributing Guide  Also come say  Hi!  to the RNE community on our public  Slack team . See you on the other side! :)", 
            "title": "Contributing"
        }, 
        {
            "location": "/API/HTML_style_headings/", 
            "text": "Text\n \nh1\nHeading\n \n1\n/Text\n\n\nText\n \nh2\nHeading\n \n2\n/Text\n\n\nText\n \nh3\nHeading\n \n3\n/Text\n\n\nText\n \nh4\nHeading\n \n4\n/Text\n\n\n\n\n\nHeadings Props\n\n\n\n\n\n\n\n\nprop\n\n\ndefault\n\n\ntype\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nh1\n\n\nnone\n\n\nboolean\n\n\nfont size 40 (optional)\n\n\n\n\n\n\nh2\n\n\nnone\n\n\nboolean\n\n\nfont size 34 (optional)\n\n\n\n\n\n\nh3\n\n\nnone\n\n\nboolean\n\n\nfont size 28 (optional)\n\n\n\n\n\n\nh4\n\n\nnone\n\n\nboolean\n\n\nfont size 22 (optional)\n\n\n\n\n\n\nfontFamily\n\n\nnone\n\n\nstring\n\n\nfont family name (optional)\n\n\n\n\n\n\nstyle\n\n\nnone\n\n\nobject (style)\n\n\nadd additional styling for Text (optional)", 
            "title": "HTML style headings"
        }, 
        {
            "location": "/API/HTML_style_headings/#headings-props", 
            "text": "prop  default  type  description      h1  none  boolean  font size 40 (optional)    h2  none  boolean  font size 34 (optional)    h3  none  boolean  font size 28 (optional)    h4  none  boolean  font size 22 (optional)    fontFamily  none  string  font family name (optional)    style  none  object (style)  add additional styling for Text (optional)", 
            "title": "Headings Props"
        }, 
        {
            "location": "/API/avatar/", 
            "text": "Avatars\n\n\n\n\nAvatar\n\n  \nsmall\n\n  \nrounded\n\n  \nsource\n=\n{{\nuri\n:\n \nhttps://s3.amazonaws.com/uifaces/faces/twitter/ladylexy/128.jpg\n}}\n\n  \nonPress\n=\n{()\n \n=\n \nconsole\n.\nlog\n(\nWorks!\n)}\n\n  \nactiveOpacity\n=\n{\n0.7\n}\n\n\n/\n\n\nAvatar\n\n  \nmedium\n\n  \nsource\n=\n{{\nuri\n:\n \nhttps://s3.amazonaws.com/uifaces/faces/twitter/kfriedson/128.jpg\n}}\n\n  \nonPress\n=\n{()\n \n=\n \nconsole\n.\nlog\n(\nWorks!\n)}\n\n  \nactiveOpacity\n=\n{\n0.7\n}\n\n\n/\n\n\nAvatar\n\n  \nlarge\n\n  \nsource\n=\n{{\nuri\n:\n \nhttps://s3.amazonaws.com/uifaces/faces/twitter/brynn/128.jpg\n}}\n\n  \nonPress\n=\n{()\n \n=\n \nconsole\n.\nlog\n(\nWorks!\n)}\n\n  \nactiveOpacity\n=\n{\n0.7\n}\n\n\n/\n\n\nAvatar\n\n  \nxlarge\n\n  \nrounded\n\n  \nsource\n=\n{{\nuri\n:\n \nhttps://s3.amazonaws.com/uifaces/faces/twitter/adhamdannaway/128.jpg\n}}\n\n  \nonPress\n=\n{()\n \n=\n \nconsole\n.\nlog\n(\nWorks!\n)}\n\n  \nactiveOpacity\n=\n{\n0.7\n}\n\n\n/\n\n\n\n\n\nAvatar with initials\n\n\n\n\nAvatar\n\n  \nsmall\n\n  \nrounded\n\n  \ntitle\n=\nMT\n\n  \nonPress\n=\n{()\n \n=\n \nconsole\n.\nlog\n(\nWorks!\n)}\n\n  \nactiveOpacity\n=\n{\n0.7\n}\n\n\n/\n\n\nAvatar\n\n  \nmedium\n\n  \ntitle\n=\nBP\n\n  \nonPress\n=\n{()\n \n=\n \nconsole\n.\nlog\n(\nWorks!\n)}\n\n  \nactiveOpacity\n=\n{\n0.7\n}\n\n\n/\n\n\nAvatar\n\n  \nlarge\n\n  \ntitle\n=\nLW\n\n  \nonPress\n=\n{()\n \n=\n \nconsole\n.\nlog\n(\nWorks!\n)}\n\n  \nactiveOpacity\n=\n{\n0.7\n}\n\n\n/\n\n\nAvatar\n\n  \nxlarge\n\n  \nrounded\n\n  \ntitle\n=\nCR\n\n  \nonPress\n=\n{()\n \n=\n \nconsole\n.\nlog\n(\nWorks!\n)}\n\n  \nactiveOpacity\n=\n{\n0.7\n}\n\n\n/\n\n\n\n\n\nAvatar with icons\n\n\n\n\nAvatar\n\n  \nsmall\n\n  \nrounded\n\n  \nicon\n=\n{{\nname\n:\n \nuser\n}}\n\n  \nonPress\n=\n{()\n \n=\n \nconsole\n.\nlog\n(\nWorks!\n)}\n\n  \nactiveOpacity\n=\n{\n0.7\n}\n\n  \ncontainerStyle\n=\n{{\nflex\n:\n \n2\n,\n \nmarginLeft\n:\n \n20\n,\n \nmarginTop\n:\n \n115\n}}\n\n\n/\n\n\nAvatar\n\n  \nmedium\n\n  \noverlayContainerStyle\n=\n{{\nbackgroundColor\n:\n \nblue\n}}\n\n  \nicon\n=\n{{\nname\n:\n \nmeetup\n,\n \ncolor\n:\n \nred\n}}\n\n  \nonPress\n=\n{()\n \n=\n \nconsole\n.\nlog\n(\nWorks!\n)}\n\n  \nactiveOpacity\n=\n{\n0.7\n}\n\n  \ncontainerStyle\n=\n{{\nflex\n:\n \n3\n,\n \nmarginTop\n:\n \n100\n}}\n\n\n/\n\n\nAvatar\n\n  \nlarge\n\n  \nicon\n=\n{{\nname\n:\n \nrocket\n,\n \ncolor\n:\n \norange\n}}\n\n  \noverlayContainerStyle\n=\n{{\nbackgroundColor\n:\n \nwhite\n}}\n\n  \nonPress\n=\n{()\n \n=\n \nconsole\n.\nlog\n(\nWorks!\n)}\n\n  \nactiveOpacity\n=\n{\n0.7\n}\n\n  \ncontainerStyle\n=\n{{\nflex\n:\n \n4\n,\n \nmarginTop\n:\n \n75\n}}\n\n\n/\n\n\nAvatar\n\n  \nxlarge\n\n  \nrounded\n\n  \nicon\n=\n{{\nname\n:\n \nhome\n}}\n\n  \nonPress\n=\n{()\n \n=\n \nconsole\n.\nlog\n(\nWorks!\n)}\n\n  \nactiveOpacity\n=\n{\n0.7\n}\n\n  \ncontainerStyle\n=\n{{\nflex\n:\n \n5\n,\n \nmarginRight\n:\n \n60\n}}\n\n\n/\n\n\n\n\n\nAvatar Props\n\n\n\n\n\n\n\n\nprop\n\n\ndefault\n\n\ntype\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\ncomponent\n\n\nTouchableOpacity\n\n\nfunction\n\n\ncomponent for enclosing element (eg: TouchableHighlight, View, etc)\n\n\n\n\n\n\nwidth\n\n\n34\n\n\nnumber\n\n\nwidth for the Avatar\n\n\n\n\n\n\nheight\n\n\n34\n\n\nnumber\n\n\nheight for the Avatar\n\n\n\n\n\n\nonPress\n\n\nnone\n\n\nfunction\n\n\ncallback function when pressing component\n\n\n\n\n\n\nonLongPress\n\n\nnone\n\n\nfunction\n\n\ncallback function when long pressing component\n\n\n\n\n\n\ncontainerStyle\n\n\nnone\n\n\nobject (style)\n\n\nstyling for outer container\n\n\n\n\n\n\nsource\n\n\nnone\n\n\nobject (image)\n\n\nimage source\n\n\n\n\n\n\navatarStyle\n\n\nnone\n\n\nobject (style)\n\n\nstyle for avatar image\n\n\n\n\n\n\nimageProps\n\n\nnone\n\n\nobject (ImageProperties)\n\n\noptional properties to pass to the avatar e.g \"resizeMode\"\n\n\n\n\n\n\nrounded\n\n\nfalse\n\n\nboolean\n\n\ndetermines the shape of avatar\n\n\n\n\n\n\ntitle\n\n\nnone\n\n\nstring\n\n\nrenders title in the avatar\n\n\n\n\n\n\ntitleStyle\n\n\nnone\n\n\nobject (style)\n\n\nstyle for the title\n\n\n\n\n\n\noverlayContainerStyle\n\n\nnone\n\n\nobject (style)\n\n\nstyle for the view outside image or icon\n\n\n\n\n\n\nactiveOpacity\n\n\n0.2\n\n\nnumber\n\n\nopacity when pressed\n\n\n\n\n\n\nicon\n\n\nnone\n\n\nobject {name: string, color: string, size: number, type: string (default is material-community, or choose one of simple-line-icon, zocial, font-awesome, octicon, ionicon, foundation, evilicon, or entypo), iconStyle: object(style)}\n\n\n\n\n\n\n\n\niconStyle\n\n\nnone\n\n\nobject (style)\n\n\nextra styling for icon component (optional)", 
            "title": "Avatar"
        }, 
        {
            "location": "/API/avatar/#avatars", 
            "text": "Avatar \n   small \n   rounded \n   source = {{ uri :   https://s3.amazonaws.com/uifaces/faces/twitter/ladylexy/128.jpg }} \n   onPress = {()   =   console . log ( Works! )} \n   activeOpacity = { 0.7 }  /  Avatar \n   medium \n   source = {{ uri :   https://s3.amazonaws.com/uifaces/faces/twitter/kfriedson/128.jpg }} \n   onPress = {()   =   console . log ( Works! )} \n   activeOpacity = { 0.7 }  /  Avatar \n   large \n   source = {{ uri :   https://s3.amazonaws.com/uifaces/faces/twitter/brynn/128.jpg }} \n   onPress = {()   =   console . log ( Works! )} \n   activeOpacity = { 0.7 }  /  Avatar \n   xlarge \n   rounded \n   source = {{ uri :   https://s3.amazonaws.com/uifaces/faces/twitter/adhamdannaway/128.jpg }} \n   onPress = {()   =   console . log ( Works! )} \n   activeOpacity = { 0.7 }  /", 
            "title": "Avatars"
        }, 
        {
            "location": "/API/avatar/#avatar-with-initials", 
            "text": "Avatar \n   small \n   rounded \n   title = MT \n   onPress = {()   =   console . log ( Works! )} \n   activeOpacity = { 0.7 }  /  Avatar \n   medium \n   title = BP \n   onPress = {()   =   console . log ( Works! )} \n   activeOpacity = { 0.7 }  /  Avatar \n   large \n   title = LW \n   onPress = {()   =   console . log ( Works! )} \n   activeOpacity = { 0.7 }  /  Avatar \n   xlarge \n   rounded \n   title = CR \n   onPress = {()   =   console . log ( Works! )} \n   activeOpacity = { 0.7 }  /", 
            "title": "Avatar with initials"
        }, 
        {
            "location": "/API/avatar/#avatar-with-icons", 
            "text": "Avatar \n   small \n   rounded \n   icon = {{ name :   user }} \n   onPress = {()   =   console . log ( Works! )} \n   activeOpacity = { 0.7 } \n   containerStyle = {{ flex :   2 ,   marginLeft :   20 ,   marginTop :   115 }}  /  Avatar \n   medium \n   overlayContainerStyle = {{ backgroundColor :   blue }} \n   icon = {{ name :   meetup ,   color :   red }} \n   onPress = {()   =   console . log ( Works! )} \n   activeOpacity = { 0.7 } \n   containerStyle = {{ flex :   3 ,   marginTop :   100 }}  /  Avatar \n   large \n   icon = {{ name :   rocket ,   color :   orange }} \n   overlayContainerStyle = {{ backgroundColor :   white }} \n   onPress = {()   =   console . log ( Works! )} \n   activeOpacity = { 0.7 } \n   containerStyle = {{ flex :   4 ,   marginTop :   75 }}  /  Avatar \n   xlarge \n   rounded \n   icon = {{ name :   home }} \n   onPress = {()   =   console . log ( Works! )} \n   activeOpacity = { 0.7 } \n   containerStyle = {{ flex :   5 ,   marginRight :   60 }}  /", 
            "title": "Avatar with icons"
        }, 
        {
            "location": "/API/avatar/#avatar-props", 
            "text": "prop  default  type  description      component  TouchableOpacity  function  component for enclosing element (eg: TouchableHighlight, View, etc)    width  34  number  width for the Avatar    height  34  number  height for the Avatar    onPress  none  function  callback function when pressing component    onLongPress  none  function  callback function when long pressing component    containerStyle  none  object (style)  styling for outer container    source  none  object (image)  image source    avatarStyle  none  object (style)  style for avatar image    imageProps  none  object (ImageProperties)  optional properties to pass to the avatar e.g \"resizeMode\"    rounded  false  boolean  determines the shape of avatar    title  none  string  renders title in the avatar    titleStyle  none  object (style)  style for the title    overlayContainerStyle  none  object (style)  style for the view outside image or icon    activeOpacity  0.2  number  opacity when pressed    icon  none  object {name: string, color: string, size: number, type: string (default is material-community, or choose one of simple-line-icon, zocial, font-awesome, octicon, ionicon, foundation, evilicon, or entypo), iconStyle: object(style)}     iconStyle  none  object (style)  extra styling for icon component (optional)", 
            "title": "Avatar Props"
        }, 
        {
            "location": "/API/badge/", 
            "text": "Example badge usage\n\nBadge\n\n  \nvalue\n=\n{\n3\n}\n\n  \ntextStyle\n=\n{{\n \ncolor\n:\n \norange\n \n}}\n\n\n/\n\n\n\nBadge\n \ncontainerStyle\n=\n{{\n \nbackgroundColor\n:\n \nviolet\n}}\n\n  \nText\nUser\n \n1\n/Text\n\n\n/Badge\n\n\n\nBadge\n \nonPress\n=\n{()\n \n=\n \n{\nconsole\n.\nlog\n(\npressed\n)}}\n \nvalue\n=\n5\n \n/\n\n\n\nBadge\n \ncomponent\n=\n{\nTouchableNative\n}\n \nvalue\n=\n{\n10\n}\n \n/\n\n\n\n\nBadge props\n\n\n\n\n\n\n\n\nprop\n\n\ndefault\n\n\ntype\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nvalue\n\n\nnone\n\n\nstring or number\n\n\ntext value to be displayed by badge, defaults to empty\n\n\n\n\n\n\ncontainerStyle\n\n\ninherited styling\n\n\nobject (style)\n\n\nstyle for the outer badge component\n\n\n\n\n\n\nwrapperStyle\n\n\ninherited styling\n\n\nobject (style)\n\n\nstyle for the outer most badge component\n\n\n\n\n\n\ntextStyle\n\n\ninherited styling\n\n\nobject (style)\n\n\nstyle for the text in the badge's value property\n\n\n\n\n\n\nchildren\n\n\nnone\n\n\nReact Native Component\n\n\noverride the default badge contents, mutually exclusive with 'value' property\n\n\n\n\n\n\nonPress\n\n\nnone\n\n\nfunction\n\n\nfunction called when pressed on the badge\n\n\n\n\n\n\ncomponent\n\n\nView, if onPress then TouchableOpacity\n\n\nReact Element\n\n\ncustom component to replace the badge outer component", 
            "title": "Badge"
        }, 
        {
            "location": "/API/badge/#badge-props", 
            "text": "prop  default  type  description      value  none  string or number  text value to be displayed by badge, defaults to empty    containerStyle  inherited styling  object (style)  style for the outer badge component    wrapperStyle  inherited styling  object (style)  style for the outer most badge component    textStyle  inherited styling  object (style)  style for the text in the badge's value property    children  none  React Native Component  override the default badge contents, mutually exclusive with 'value' property    onPress  none  function  function called when pressed on the badge    component  View, if onPress then TouchableOpacity  React Element  custom component to replace the badge outer component", 
            "title": "Badge props"
        }, 
        {
            "location": "/API/button_group/", 
            "text": "Snack Demo\n\n\n\n\nUsing strings\n\n\nconstructor\n \n()\n \n{\n\n  \nsuper\n()\n\n  \nthis\n.\nstate\n \n=\n \n{\n\n    \nselectedIndex\n:\n \n2\n\n  \n}\n\n  \nthis\n.\nupdateIndex\n \n=\n \nthis\n.\nupdateIndex\n.\nbind\n(\nthis\n)\n\n\n}\n\n\n\nupdateIndex\n \n(\nselectedIndex\n)\n \n{\n\n  \nthis\n.\nsetState\n({\nselectedIndex\n})\n\n\n}\n\n\n\nrender\n \n()\n \n{\n\n  \nconst\n \nbuttons\n \n=\n \n[\nHello\n,\n \nWorld\n,\n \nButtons\n]\n\n  \nconst\n \n{\n \nselectedIndex\n \n}\n \n=\n \nthis\n.\nstate\n\n\n  \nreturn\n \n(\n\n    \nButtonGroup\n\n      \nonPress\n=\n{\nthis\n.\nupdateIndex\n}\n\n      \nselectedIndex\n=\n{\nselectedIndex\n}\n\n      \nbuttons\n=\n{\nbuttons\n}\n\n      \ncontainerStyle\n=\n{{\nheight\n:\n \n100\n}}\n\n    \n/\n\n  \n)\n\n\n}\n\n\n\n\n\nUsing components\n\n\nconstructor\n \n()\n \n{\n\n  \nsuper\n()\n\n  \nthis\n.\nstate\n \n=\n \n{\n\n    \nselectedIndex\n:\n \n2\n\n  \n}\n\n  \nthis\n.\nupdateIndex\n \n=\n \nthis\n.\nupdateIndex\n.\nbind\n(\nthis\n)\n\n\n}\n\n\nupdateIndex\n \n(\nselectedIndex\n)\n \n{\n\n  \nthis\n.\nsetState\n({\nselectedIndex\n})\n\n\n}\n\n\n\nconst\n \ncomponent1\n \n=\n \n()\n \n=\n \nText\nHello\n/Text\n\n\nconst\n \ncomponent2\n \n=\n \n()\n \n=\n \nText\nWorld\n/Text\n\n\nconst\n \ncomponent3\n \n=\n \n()\n \n=\n \nText\nButtonGroup\n/Text\n\n\n\nrender\n \n()\n \n{\n\n  \nconst\n \nbuttons\n \n=\n \n[{\n \nelement\n:\n \ncomponent1\n \n},\n \n{\n \nelement\n:\n \ncomponent2\n \n},\n \n{\n \nelement\n:\n \ncomponent3\n \n}]\n\n  \nconst\n \n{\n \nselectedIndex\n \n}\n \n=\n \nthis\n.\nstate\n\n  \nreturn\n \n(\n\n    \nButtonGroup\n\n      \nonPress\n=\n{\nthis\n.\nupdateIndex\n}\n\n      \nselectedIndex\n=\n{\nselectedIndex\n}\n\n      \nbuttons\n=\n{\nbuttons\n}\n\n      \ncontainerStyle\n=\n{{\nheight\n:\n \n100\n}}\n \n/\n\n  \n)\n\n\n}\n\n\n\n\n\nButtonGroup props\n\n\n\n\nThis component inherits \nall native TouchableHighlight and TouchableOpacity props that come with React Native TouchableHighlight or TouchableOpacity elements\n, along with the following:\n\n\n\n\n\n\n\n\n\n\nprop\n\n\ndefault\n\n\ntype\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nselectedIndex\n\n\nnone\n\n\nnumber\n\n\ncurrent selected index of array of buttons (required)\n\n\n\n\n\n\nselectMultiple\n\n\nfalse\n\n\nboolean\n\n\nallows the user to select multiple buttons\n\n\n\n\n\n\nselectedIndexes\n\n\n[]\n\n\narray (number)\n\n\ncurrent selected indexes from the array of buttons\n\n\n\n\n\n\nonPress\n\n\nnone\n\n\nfunction\n\n\nmethod to update Button Group Index (required)\n\n\n\n\n\n\nbuttons\n\n\nnone\n\n\narray\n\n\narray of buttons for component (required), if returning a component, must be an object with { element: componentName }\n\n\n\n\n\n\ncomponent\n\n\nTouchableHighlight\n\n\nReact Native Component\n\n\nChoose other button component such as TouchableOpacity (optional)\n\n\n\n\n\n\ncontainerStyle\n\n\ninherited styling\n\n\nobject (style)\n\n\nspecify styling for main button container (optional)\n\n\n\n\n\n\nbuttonStyle\n\n\ninherited styling\n\n\nobject (style)\n\n\nspecify styling for button (optional)\n\n\n\n\n\n\nselectedButtonStyle\n\n\ninherited styling\n\n\nobject (style)\n\n\nspecify styling for selected button (optional)\n\n\n\n\n\n\ncontainerBorderRadius\n\n\n3\n\n\nnumber\n\n\nSet's the border radius for the first and last button in the button group\n\n\n\n\n\n\ntextStyle\n\n\ninherited styling\n\n\nobject (style)\n\n\nspecify specific styling for text (optional)\n\n\n\n\n\n\nselectedTextStyle\n\n\ninherited styling\n\n\nobject (style)\n\n\nspecify specific styling for text in the selected state (optional)\n\n\n\n\n\n\ninnerBorderStyle\n\n\ninherited styling\n\n\nobject { width, color }\n\n\nupdate the styling of the interior border of the list of buttons (optional)\n\n\n\n\n\n\nunderlayColor\n\n\nwhite\n\n\nstring\n\n\nspecify underlayColor for TouchableHighlight (optional)\n\n\n\n\n\n\ndisableSelected\n\n\nfalse\n\n\nboolean\n\n\ndisables the currently selected button if true", 
            "title": "Button group"
        }, 
        {
            "location": "/API/button_group/#snack-demo", 
            "text": "", 
            "title": "Snack Demo"
        }, 
        {
            "location": "/API/button_group/#using-strings", 
            "text": "constructor   ()   { \n   super () \n   this . state   =   { \n     selectedIndex :   2 \n   } \n   this . updateIndex   =   this . updateIndex . bind ( this )  }  updateIndex   ( selectedIndex )   { \n   this . setState ({ selectedIndex })  }  render   ()   { \n   const   buttons   =   [ Hello ,   World ,   Buttons ] \n   const   {   selectedIndex   }   =   this . state \n\n   return   ( \n     ButtonGroup \n       onPress = { this . updateIndex } \n       selectedIndex = { selectedIndex } \n       buttons = { buttons } \n       containerStyle = {{ height :   100 }} \n     / \n   )  }", 
            "title": "Using strings"
        }, 
        {
            "location": "/API/button_group/#using-components", 
            "text": "constructor   ()   { \n   super () \n   this . state   =   { \n     selectedIndex :   2 \n   } \n   this . updateIndex   =   this . updateIndex . bind ( this )  }  updateIndex   ( selectedIndex )   { \n   this . setState ({ selectedIndex })  }  const   component1   =   ()   =   Text Hello /Text  const   component2   =   ()   =   Text World /Text  const   component3   =   ()   =   Text ButtonGroup /Text  render   ()   { \n   const   buttons   =   [{   element :   component1   },   {   element :   component2   },   {   element :   component3   }] \n   const   {   selectedIndex   }   =   this . state \n   return   ( \n     ButtonGroup \n       onPress = { this . updateIndex } \n       selectedIndex = { selectedIndex } \n       buttons = { buttons } \n       containerStyle = {{ height :   100 }}   / \n   )  }", 
            "title": "Using components"
        }, 
        {
            "location": "/API/button_group/#buttongroup-props", 
            "text": "This component inherits  all native TouchableHighlight and TouchableOpacity props that come with React Native TouchableHighlight or TouchableOpacity elements , along with the following:      prop  default  type  description      selectedIndex  none  number  current selected index of array of buttons (required)    selectMultiple  false  boolean  allows the user to select multiple buttons    selectedIndexes  []  array (number)  current selected indexes from the array of buttons    onPress  none  function  method to update Button Group Index (required)    buttons  none  array  array of buttons for component (required), if returning a component, must be an object with { element: componentName }    component  TouchableHighlight  React Native Component  Choose other button component such as TouchableOpacity (optional)    containerStyle  inherited styling  object (style)  specify styling for main button container (optional)    buttonStyle  inherited styling  object (style)  specify styling for button (optional)    selectedButtonStyle  inherited styling  object (style)  specify styling for selected button (optional)    containerBorderRadius  3  number  Set's the border radius for the first and last button in the button group    textStyle  inherited styling  object (style)  specify specific styling for text (optional)    selectedTextStyle  inherited styling  object (style)  specify specific styling for text in the selected state (optional)    innerBorderStyle  inherited styling  object { width, color }  update the styling of the interior border of the list of buttons (optional)    underlayColor  white  string  specify underlayColor for TouchableHighlight (optional)    disableSelected  false  boolean  disables the currently selected button if true", 
            "title": "ButtonGroup props"
        }, 
        {
            "location": "/API/buttons/", 
            "text": "Buttons can be used to interact with the screen. It takes the following props.\n\n\n\n\nimport\n \n{\n \nButton\n \n}\n \nfrom\n \nreact-native-elements\n;\n\n\nimport\n \nIcon\n \nfrom\n \nreact-native-vector-icons/FontAwesome\n;\n\n\n\nButton\n\n  \ntext\n=\nBUTTON\n\n\n/\n\n\n\nButton\n\n  \nicon\n=\n{\n\n    \nIcon\n\n      \nname\n=\narrow-right\n\n      \nsize\n=\n{\n15\n}\n\n      \ncolor\n=\nwhite\n\n    \n/\n\n  \n}\n\n  \ntext\n=\nBUTTON WITH ICON\n\n\n/\n\n\n\nButton\n\n  \nicon\n=\n{\n\n    \nIcon\n\n      \nname\n=\narrow-right\n\n      \nsize\n=\n{\n15\n}\n\n      \ncolor\n=\nwhite\n\n    \n/\n\n  \n}\n\n  \niconRight\n\n  \ntext\n=\nBUTTON WITH RIGHT ICON\n\n\n/\n\n\n\nButton\n\n  \ntext\n=\nLOADING BUTTON\n\n  \nloading\n\n  \nloadingProps\n=\n{{\n \nsize\n:\n \nlarge\n,\n \ncolor\n:\n \nrgba(111, 202, 186, 1)\n \n}}\n\n  \ntextStyle\n=\n{{\n \nfontWeight\n:\n \n700\n \n}}\n\n  \nbuttonStyle\n=\n{{\n\n    \nbackgroundColor\n:\n \nrgba(92, 99,216, 1)\n,\n\n    \nwidth\n:\n \n300\n,\n\n    \nheight\n:\n \n45\n,\n\n    \nborderColor\n:\n \ntransparent\n,\n\n    \nborderWidth\n:\n \n0\n,\n\n    \nborderRadius\n:\n \n5\n\n  \n}}\n\n  \ncontainerStyle\n=\n{{\n \nmarginTop\n:\n \n20\n \n}}\n\n\n/\n\n\n\n\n\nButton props\n\n\n\n\nAlso receives all TouchableNativeFeedback (Android) or TouchableOpacity (iOS) props\n\n\n\n\n\n\n\n\n\n\nprop\n\n\ndefault\n\n\ntype\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\ntext\n\n\nnone\n\n\nstring\n\n\nbutton text (optional)\n\n\n\n\n\n\ntextStyle\n\n\nnone\n\n\nText style (object)\n\n\nadd additional styling for text component (optional)\n\n\n\n\n\n\ntextProps\n\n\nnone\n\n\nobject (style)\n\n\nadd additional props for Text component (optional)\n\n\n\n\n\n\nbuttonStyle\n\n\nnone\n\n\nobject (style)\n\n\nadd additional styling for button component (optional)\n\n\n\n\n\n\nclear\n\n\nnone\n\n\nboolean\n\n\nmakes the button transparent (optional)\n\n\n\n\n\n\nloading\n\n\nnone\n\n\nboolean\n\n\nprop to display a loading spinner (optional)\n\n\n\n\n\n\nloadingStyle\n\n\nnone\n\n\nView style (object)\n\n\nadd additional styling for loading component (optional)\n\n\n\n\n\n\nloadingProps\n\n\nnone\n\n\nobject (style)\n\n\nadd additional props for ActivityIndicator component (optional)\n\n\n\n\n\n\nonPress\n\n\nnone\n\n\nfunction\n\n\nonPress method (optional)\n\n\n\n\n\n\ncontainerStyle\n\n\nnone\n\n\nView style (object)\n\n\nstyling for Component container\n\n\n\n\n\n\nicon\n\n\nnone\n\n\nReact Native Component\n\n\ndisplays a centered icon (when no text) or to the left (with text). (can be used along with iconRight as well)\n\n\n\n\n\n\niconContainerStyle\n\n\nnone\n\n\nView style (object)\n\n\nstyling for Icon Component container\n\n\n\n\n\n\niconRight\n\n\nnone\n\n\nboolean\n\n\ndisplays Icon to the right of Text. Needs to be used along with icon prop\n\n\n\n\n\n\nlinearGradientProps\n\n\nnone\n\n\nobject\n\n\ndisplays a linear gradient (supports Expo only)\n\n\n\n\n\n\nTouchableComponent\n\n\nTouchableOpacity (ios) or TouchableNativeFeedback (android)\n\n\nTouchable Component\n\n\ncomponent for user interaction\n\n\n\n\n\n\nViewComponent\n\n\nView\n\n\nReact Native Component\n\n\ncontainer for linear gradient", 
            "title": "Buttons"
        }, 
        {
            "location": "/API/buttons/#button-props", 
            "text": "Also receives all TouchableNativeFeedback (Android) or TouchableOpacity (iOS) props      prop  default  type  description      text  none  string  button text (optional)    textStyle  none  Text style (object)  add additional styling for text component (optional)    textProps  none  object (style)  add additional props for Text component (optional)    buttonStyle  none  object (style)  add additional styling for button component (optional)    clear  none  boolean  makes the button transparent (optional)    loading  none  boolean  prop to display a loading spinner (optional)    loadingStyle  none  View style (object)  add additional styling for loading component (optional)    loadingProps  none  object (style)  add additional props for ActivityIndicator component (optional)    onPress  none  function  onPress method (optional)    containerStyle  none  View style (object)  styling for Component container    icon  none  React Native Component  displays a centered icon (when no text) or to the left (with text). (can be used along with iconRight as well)    iconContainerStyle  none  View style (object)  styling for Icon Component container    iconRight  none  boolean  displays Icon to the right of Text. Needs to be used along with icon prop    linearGradientProps  none  object  displays a linear gradient (supports Expo only)    TouchableComponent  TouchableOpacity (ios) or TouchableNativeFeedback (android)  Touchable Component  component for user interaction    ViewComponent  View  React Native Component  container for linear gradient", 
            "title": "Button props"
        }, 
        {
            "location": "/API/card/", 
            "text": "const\n \nusers\n \n=\n \n[\n\n \n{\n\n    \nname\n:\n \nbrynn\n,\n\n    \navatar\n:\n \nhttps://s3.amazonaws.com/uifaces/faces/twitter/brynn/128.jpg\n\n \n},\n\n \n...\n \n// more users here\n\n\n]\n\n\n\nimport\n \n{\n \nView\n,\n \nText\n,\n \nImage\n \n}\n \nfrom\n \nreact-native\n\n\nimport\n \n{\n \nCard\n,\n \nListItem\n,\n \nButton\n \n}\n \nfrom\n \nreact-native-elements\n\n\n\n// implemented without image with header\n\n\nCard\n \ntitle\n=\nCARD WITH DIVIDER\n\n  \n{\n\n    \nusers\n.\nmap\n((\nu\n,\n \ni\n)\n \n=\n \n{\n\n      \nreturn\n \n(\n\n        \nView\n \nkey\n=\n{\ni\n}\n \nstyle\n=\n{\nstyles\n.\nuser\n}\n\n          \nImage\n\n            \nstyle\n=\n{\nstyles\n.\nimage\n}\n\n            \nresizeMode\n=\ncover\n\n            \nsource\n=\n{{\n \nuri\n:\n \nu\n.\navatar\n \n}}\n\n          \n/\n\n          \nText\n \nstyle\n=\n{\nstyles\n.\nname\n}\n{\nu\n.\nname\n}\n/Text\n\n        \n/View\n\n      \n);\n\n    \n})\n\n  \n}\n\n\n/Card\n\n\n\n// implemented without image without header, using ListItem component\n\n \nCard\n \ncontainerStyle\n=\n{{\npadding\n:\n \n0\n}}\n \n\n  \n{\n\n    \nusers\n.\nmap\n((\nu\n,\n \ni\n)\n \n=\n \n{\n\n      \nreturn\n \n(\n\n        \nListItem\n\n          \nkey\n=\n{\ni\n}\n\n          \nroundAvatar\n\n          \ntitle\n=\n{\nu\n.\nname\n}\n\n          \navatar\n=\n{{\nuri\n:\nu\n.\navatar\n}}\n\n        \n/\n\n      \n);\n\n    \n})\n\n  \n}\n\n\n/Card\n\n\n\n\n// implemented with Text and Button as children\n\n\nCard\n\n  \ntitle\n=\nHELLO WORLD\n\n  \nimage\n=\n{\nrequire\n(\n../images/pic2.jpg\n)}\n\n  \nText\n \nstyle\n=\n{{\nmarginBottom\n:\n \n10\n}}\n\n    \nThe\n \nidea\n \nwith\n \nReact\n \nNative\n \nElements\n \nis\n \nmore\n \nabout\n \ncomponent\n \nstructure\n \nthan\n \nactual\n \ndesign\n.\n\n  \n/Text\n\n  \nButton\n\n    \nicon\n=\n{{\nname\n:\n \ncode\n}}\n\n    \nbackgroundColor\n=\n#03A9F4\n\n    \nfontFamily\n=\nLato\n\n    \nbuttonStyle\n=\n{{\nborderRadius\n:\n \n0\n,\n \nmarginLeft\n:\n \n0\n,\n \nmarginRight\n:\n \n0\n,\n \nmarginBottom\n:\n \n0\n}}\n\n    \ntitle\n=\nVIEW NOW\n \n/\n\n\n/Card\n\n\n\n\n\nCard props\n\n\n\n\n\n\n\n\nprop\n\n\ndefault\n\n\ntype\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nflexDirection\n\n\ncolumn\n\n\nstring\n\n\nflex direction (row or column) (optional)\n\n\n\n\n\n\ncontainerStyle\n\n\nnone\n\n\nobject (style)\n\n\nouter container style (optional)\n\n\n\n\n\n\nwrapperStyle\n\n\nnone\n\n\nobject (style)\n\n\ninner container style (optional)\n\n\n\n\n\n\ntitle\n\n\nnone\n\n\nstring\n\n\noptional card title (optional)\n\n\n\n\n\n\ntitleStyle\n\n\nnone\n\n\nobject (style)\n\n\nadditional title styling (if title provided) (optional)\n\n\n\n\n\n\ntitleNumberOfLines\n\n\nnone\n\n\nnumber\n\n\nnumber of lines for title (optional)\n\n\n\n\n\n\nfeaturedTitle\n\n\nnone\n\n\nstring\n\n\ntitle rendered over the image (only works if image prop is present)\n\n\n\n\n\n\nfeaturedTitleStyle\n\n\nnone\n\n\nobject (style)\n\n\nstyling for featured title\n\n\n\n\n\n\nfeaturedSubtitle\n\n\nnone\n\n\nstring\n\n\nsubtitle rendered over the image (only works if image prop is present)\n\n\n\n\n\n\nfeaturedSubtitleStyle\n\n\nnone\n\n\nobject (style)\n\n\nstyling for featured subtitle\n\n\n\n\n\n\ndividerStyle\n\n\nnone\n\n\nobject (style)\n\n\nadditional divider styling (if title provided) (optional)\n\n\n\n\n\n\nfontFamily\n\n\nSystem font bold (iOS), Sans Serif Bold (android)\n\n\nstring\n\n\nspecify different font family\n\n\n\n\n\n\nimageStyle\n\n\ninherited styling\n\n\nobject(style)\n\n\nspecify image styling if image is provided\n\n\n\n\n\n\nimageProps\n\n\nnone\n\n\nobject (ImageProperties)\n\n\noptional properties to pass to the image if provided e.g \"resizeMode\"\n\n\n\n\n\n\nimageWrapperStyle\n\n\nnone\n\n\nobject(style)\n\n\nspecify styling for view surrounding image\n\n\n\n\n\n\nimage\n\n\nnone\n\n\nimage uri or require path\n\n\nadd an image as the heading with the image prop (optional)", 
            "title": "Card"
        }, 
        {
            "location": "/API/card/#card-props", 
            "text": "prop  default  type  description      flexDirection  column  string  flex direction (row or column) (optional)    containerStyle  none  object (style)  outer container style (optional)    wrapperStyle  none  object (style)  inner container style (optional)    title  none  string  optional card title (optional)    titleStyle  none  object (style)  additional title styling (if title provided) (optional)    titleNumberOfLines  none  number  number of lines for title (optional)    featuredTitle  none  string  title rendered over the image (only works if image prop is present)    featuredTitleStyle  none  object (style)  styling for featured title    featuredSubtitle  none  string  subtitle rendered over the image (only works if image prop is present)    featuredSubtitleStyle  none  object (style)  styling for featured subtitle    dividerStyle  none  object (style)  additional divider styling (if title provided) (optional)    fontFamily  System font bold (iOS), Sans Serif Bold (android)  string  specify different font family    imageStyle  inherited styling  object(style)  specify image styling if image is provided    imageProps  none  object (ImageProperties)  optional properties to pass to the image if provided e.g \"resizeMode\"    imageWrapperStyle  none  object(style)  specify styling for view surrounding image    image  none  image uri or require path  add an image as the heading with the image prop (optional)", 
            "title": "Card props"
        }, 
        {
            "location": "/API/checkbox/", 
            "text": "import\n \n{\n \nCheckBox\n \n}\n \nfrom\n \nreact-native-elements\n\n\n\nCheckBox\n\n  \ntitle\n=\nClick Here\n\n  \nchecked\n=\n{\nthis\n.\nstate\n.\nchecked\n}\n\n\n/\n\n\n\nCheckBox\n\n  \ncenter\n\n  \ntitle\n=\nClick Here\n\n  \nchecked\n=\n{\nthis\n.\nstate\n.\nchecked\n}\n\n\n/\n\n\n\nCheckBox\n\n  \ncenter\n\n  \ntitle\n=\nClick Here\n\n  \ncheckedIcon\n=\ndot-circle-o\n\n  \nuncheckedIcon\n=\ncircle-o\n\n  \nchecked\n=\n{\nthis\n.\nstate\n.\nchecked\n}\n\n\n/\n\n\n\nCheckBox\n\n  \ncenter\n\n  \ntitle\n=\nClick Here to Remove This Item\n\n  \niconRight\n\n  \niconType\n=\nmaterial\n\n  \ncheckedIcon\n=\nclear\n\n  \nuncheckedIcon\n=\nadd\n\n  \ncheckedColor\n=\nred\n\n  \nchecked\n=\n{\nthis\n.\nstate\n.\nchecked\n}\n\n\n/\n\n\n\n\n\nCheckbox props\n\n\n\n\nThis component uses FontAwesome icons out of the box. You can also specify one of the following types of icons by specifying an iconType prop: Simple Line Icon, Zocial, Octicons, MaterialIcons, MaterialCommunityIcons, Ionicons, Foundation, EvilIcons, or Entypo\n\n\n\n\n\n\n\n\n\n\nprop\n\n\ndefault\n\n\ntype\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\niconType\n\n\nfontawesome\n\n\nstring\n\n\nicon family, can be one of the following: simple-line-icon, zocial, octicon, material, material-community, ionicon, foundation, evilicon, entypo (required only if specifying an icon that is not from font-awesome)\n\n\n\n\n\n\ncomponent\n\n\nTouchableOpacity\n\n\nReact Native Component\n\n\nspecify React Native component for main button (optional)\n\n\n\n\n\n\nchecked\n\n\nfalse\n\n\nboolean\n\n\nflag for checking the icon (required)\n\n\n\n\n\n\nsize\n\n\n24\n\n\nnumber\n\n\nsize of the checkbox\n\n\n\n\n\n\niconRight\n\n\nfalse\n\n\nboolean\n\n\nmoves icon to right of text (optional)\n\n\n\n\n\n\nright\n\n\nfalse\n\n\nboolean\n\n\naligns checkbox to right (optional)\n\n\n\n\n\n\ncenter\n\n\nfalse\n\n\nboolean\n\n\naligns checkbox to center (optional)\n\n\n\n\n\n\ntitle\n\n\nnone\n\n\nstring\n\n\ntitle of checkbox (required)\n\n\n\n\n\n\ncontainerStyle\n\n\nnone\n\n\nobject (style)\n\n\nstyle of main container (optional)\n\n\n\n\n\n\ntextStyle\n\n\nnone\n\n\nobject (style)\n\n\nstyle of text (optional)\n\n\n\n\n\n\nonLongPress\n\n\nnone\n\n\nfunction\n\n\nonLongPress function for checkbox (optional)\n\n\n\n\n\n\nonLongIconPress\n\n\nnone\n\n\nfunction\n\n\nonLongPress function for checkbox (optional)\n\n\n\n\n\n\nonPress\n\n\nnone\n\n\nfunction\n\n\nonPress function for container (optional)\n\n\n\n\n\n\nonIconPress\n\n\nnone\n\n\nfunction\n\n\nonPress function for checkbox (required)\n\n\n\n\n\n\ncheckedIcon\n\n\ncheck-square-o\n\n\nstring\n\n\ndefault checked icon (\nFont Awesome Icon\n) (optional)\n\n\n\n\n\n\nuncheckedIcon\n\n\nsquare-o\n\n\nstring\n\n\ndefault checked icon (\nFont Awesome Icon\n) (optional)\n\n\n\n\n\n\ncheckedColor\n\n\ngreen\n\n\nstring\n\n\ndefault checked color (optional)\n\n\n\n\n\n\nuncheckedColor\n\n\n#bfbfbf\n\n\nstring\n\n\ndefault unchecked color (optional)\n\n\n\n\n\n\ncheckedTitle\n\n\nnone\n\n\nstring\n\n\nspecify a custom checked message (optional)\n\n\n\n\n\n\nfontFamily\n\n\nSystem font bold (iOS), Sans Serif Bold (android)\n\n\nstring\n\n\nspecify different font family", 
            "title": "Checkbox"
        }, 
        {
            "location": "/API/checkbox/#checkbox-props", 
            "text": "This component uses FontAwesome icons out of the box. You can also specify one of the following types of icons by specifying an iconType prop: Simple Line Icon, Zocial, Octicons, MaterialIcons, MaterialCommunityIcons, Ionicons, Foundation, EvilIcons, or Entypo      prop  default  type  description      iconType  fontawesome  string  icon family, can be one of the following: simple-line-icon, zocial, octicon, material, material-community, ionicon, foundation, evilicon, entypo (required only if specifying an icon that is not from font-awesome)    component  TouchableOpacity  React Native Component  specify React Native component for main button (optional)    checked  false  boolean  flag for checking the icon (required)    size  24  number  size of the checkbox    iconRight  false  boolean  moves icon to right of text (optional)    right  false  boolean  aligns checkbox to right (optional)    center  false  boolean  aligns checkbox to center (optional)    title  none  string  title of checkbox (required)    containerStyle  none  object (style)  style of main container (optional)    textStyle  none  object (style)  style of text (optional)    onLongPress  none  function  onLongPress function for checkbox (optional)    onLongIconPress  none  function  onLongPress function for checkbox (optional)    onPress  none  function  onPress function for container (optional)    onIconPress  none  function  onPress function for checkbox (required)    checkedIcon  check-square-o  string  default checked icon ( Font Awesome Icon ) (optional)    uncheckedIcon  square-o  string  default checked icon ( Font Awesome Icon ) (optional)    checkedColor  green  string  default checked color (optional)    uncheckedColor  #bfbfbf  string  default unchecked color (optional)    checkedTitle  none  string  specify a custom checked message (optional)    fontFamily  System font bold (iOS), Sans Serif Bold (android)  string  specify different font family", 
            "title": "Checkbox props"
        }, 
        {
            "location": "/API/divider/", 
            "text": "Example divider usage\n\nDivider\n \nstyle\n=\n{{\n \nbackgroundColor\n:\n \nblue\n \n}}\n \n/\n\n\n\n\nDivider props\n\n\n\n\n\n\n\n\nprop\n\n\ndefault\n\n\ntype\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nstyle\n\n\n{height: 1, backgroundColor: #e1e8ee}\n\n\nstyle object\n\n\nstyle the divider", 
            "title": "Divider"
        }, 
        {
            "location": "/API/divider/#divider-props", 
            "text": "prop  default  type  description      style  {height: 1, backgroundColor: #e1e8ee}  style object  style the divider", 
            "title": "Divider props"
        }, 
        {
            "location": "/API/forms/", 
            "text": "import\n \n{\n \nFormLabel\n,\n \nFormInput\n \n}\n \nfrom\n \nreact-native-elements\n\n\n\nFormLabel\nName\n/FormLabel\n\n\nFormInput\n \nonChangeText\n=\n{\nsomeFunction\n}\n/\n\n\nFormValidationMessage\nError\n \nmessage\n/FormValidationMessage\n\n\n\n\n\nFormValidationMessage example\n\n\nThe \nFormValidationMessage\n component is just a styled text. You have to implement for now the logic of errors. Basically, if you have an error, display the FormValidationMesage, if not, display nothing.\n\n\nFormValidationMessage\n\n  \n{\nThis field is required\n}\n\n\n/FormValidationMessage\n\n\n\n\n\n\nFormInput props\n\n\nThis component inherits \nall native TextInput props that come with a standard React Native TextInput element\n, along with the following:\n\n\n\n\n\n\n\n\nprop\n\n\ndefault\n\n\ntype\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\ncontainerStyle\n\n\nnone\n\n\nobject (style)\n\n\nTextInput container styling (optional)\n\n\n\n\n\n\ninputStyle\n\n\nnone\n\n\nobject (style)\n\n\nTextInput styling (optional)\n\n\n\n\n\n\ntextInputRef\n\n\nnone\n\n\nref\n\n\nget ref of TextInput\n\n\n\n\n\n\ncontainerRef\n\n\nnone\n\n\nref\n\n\nget ref of TextInput container\n\n\n\n\n\n\nshake\n\n\nnone\n\n\nall comparable types (\n===\n)\n\n\nshake the textinput if not a falsy value and different from the previous value\n\n\n\n\n\n\n\n\nFormInput methods\n\n\n\n\n\n\n\n\nname\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nshake\n\n\nshake the textinput, eg \nthis.refs.someInputRef.shake()\n\n\n\n\n\n\nfocus\n\n\ncall focus on the textinput (\nexample\n)\n\n\n\n\n\n\nblur\n\n\ncall blur on the textinput (\nexample\n)\n\n\n\n\n\n\nclearText\n\n\ncall clear on the textinput (\nexample\n)\n\n\n\n\n\n\n\n\nFormLabel props\n\n\n\n\n\n\n\n\nprop\n\n\ndefault\n\n\ntype\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\ncontainerStyle\n\n\nnone\n\n\nobject (style)\n\n\nadditional label container style (optional)\n\n\n\n\n\n\nlabelStyle\n\n\nnone\n\n\nobject (style)\n\n\nadditional label styling (optional)\n\n\n\n\n\n\nfontFamily\n\n\nSystem font bold (iOS), Sans Serif Bold (android)\n\n\nstring\n\n\nspecify different font family\n\n\n\n\n\n\n\n\nFormValidationMessage props\n\n\n\n\n\n\n\n\nprop\n\n\ndefault\n\n\ntype\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\ncontainerStyle\n\n\nnone\n\n\nobject (style)\n\n\nadditional label container style (optional)\n\n\n\n\n\n\nlabelStyle\n\n\nnone\n\n\nobject (style)\n\n\nadditional label styling (optional)\n\n\n\n\n\n\nfontFamily\n\n\nSystem font bold (iOS), Sans Serif Bold (android)\n\n\nstring\n\n\nspecify different font family\n\n\n\n\n\n\n\n\n Calling methods on FormInput\n\n\nStore a reference to the FormInput in your component by using the ref prop provided by React (\nsee docs\n):\n\nFormInput\n\n  \nref\n=\n{\ninput\n \n=\n \nthis\n.\ninput\n \n=\n \ninput\n}\n\n  \n...\n\n\n/\n\n\n\nYou can then access FormInput methods like so:\n\n\nthis.input.focus();\nthis.input.blur();\nthis.input.clearText();\nthis.refs.forminput.refs.email\n\n\n\n\nFormInput shake example\n\n\nUsing ref\n\n\nerrorHandler\n()\n \n{\n\n  \nif\n \n(\nthis\n.\nstate\n.\nerror\n)\n \n{\n\n    \nthis\n.\nformInput\n.\nshake\n()\n\n  \n}\n\n\n}\n\n\n\nTextInput\n\n  \nref\n=\n{\nref\n \n=\n \nthis\n.\nformInput\n \n=\n \nref\n}\n\n\n/\n\n\n\n\n\nUsing props\n\n\nSimple example\n\n\nTextInput\n\n  \nshake\n=\n{\n!\nthis\n.\nstate\n.\nerror\n \n?\n \nfalse\n \n:\n \ntrue\n}\n\n  \n...\nprops\n\n\n/\n\n\n\n\n\nAdvanced example\n\n\nIf you want to shake the input each time an error occurs, you can compare objects.\nEach time an error occurs, it'll create a new object and trigger shake.\n\n\n  \nerrorHandler\n(\ncode\n,\n \nmessage\n)\n \n{\n\n    \nthis\n.\nsetState\n({\n\n      \nerror\n:\n \n!\ncode\n \n?\n \nnull\n \n:\n\n        \n{\n\n          \ncode\n,\n\n          \nmessage\n,\n\n        \n}\n\n    \n})\n\n  \n}\n\n\n  \nTextInput\n\n    \nshake\n=\n{\nthis\n.\nstate\n.\nerror\n}\n\n    \n...\nprops\n\n  \n/\n\n\n\n\n\nWith this system, you can trigger shakes consecutively.\nOf course, if shake is \nnull\n or \nfalse\n or \nundefined\n, etc... (falsy values), it'll not trigger the shake.", 
            "title": "Forms"
        }, 
        {
            "location": "/API/forms/#formvalidationmessage-example", 
            "text": "", 
            "title": "FormValidationMessage example"
        }, 
        {
            "location": "/API/forms/#the-formvalidationmessage-component-is-just-a-styled-text-you-have-to-implement-for-now-the-logic-of-errors-basically-if-you-have-an-error-display-the-formvalidationmesage-if-not-display-nothing", 
            "text": "FormValidationMessage \n   { This field is required }  /FormValidationMessage", 
            "title": "The FormValidationMessage component is just a styled text. You have to implement for now the logic of errors. Basically, if you have an error, display the FormValidationMesage, if not, display nothing."
        }, 
        {
            "location": "/API/forms/#forminput-props", 
            "text": "", 
            "title": "FormInput props"
        }, 
        {
            "location": "/API/forms/#this-component-inherits-all-native-textinput-props-that-come-with-a-standard-react-native-textinput-element-along-with-the-following", 
            "text": "prop  default  type  description      containerStyle  none  object (style)  TextInput container styling (optional)    inputStyle  none  object (style)  TextInput styling (optional)    textInputRef  none  ref  get ref of TextInput    containerRef  none  ref  get ref of TextInput container    shake  none  all comparable types ( === )  shake the textinput if not a falsy value and different from the previous value", 
            "title": "This component inherits all native TextInput props that come with a standard React Native TextInput element, along with the following:"
        }, 
        {
            "location": "/API/forms/#forminput-methods", 
            "text": "name  description      shake  shake the textinput, eg  this.refs.someInputRef.shake()    focus  call focus on the textinput ( example )    blur  call blur on the textinput ( example )    clearText  call clear on the textinput ( example )", 
            "title": "FormInput methods"
        }, 
        {
            "location": "/API/forms/#formlabel-props", 
            "text": "prop  default  type  description      containerStyle  none  object (style)  additional label container style (optional)    labelStyle  none  object (style)  additional label styling (optional)    fontFamily  System font bold (iOS), Sans Serif Bold (android)  string  specify different font family", 
            "title": "FormLabel props"
        }, 
        {
            "location": "/API/forms/#formvalidationmessage-props", 
            "text": "prop  default  type  description      containerStyle  none  object (style)  additional label container style (optional)    labelStyle  none  object (style)  additional label styling (optional)    fontFamily  System font bold (iOS), Sans Serif Bold (android)  string  specify different font family", 
            "title": "FormValidationMessage props"
        }, 
        {
            "location": "/API/forms/#forminput-shake-example", 
            "text": "", 
            "title": "FormInput shake example"
        }, 
        {
            "location": "/API/forms/#using-ref", 
            "text": "errorHandler ()   { \n   if   ( this . state . error )   { \n     this . formInput . shake () \n   }  }  TextInput \n   ref = { ref   =   this . formInput   =   ref }  /", 
            "title": "Using ref"
        }, 
        {
            "location": "/API/forms/#using-props", 
            "text": "Simple example  TextInput \n   shake = { ! this . state . error   ?   false   :   true } \n   ... props  /   Advanced example  If you want to shake the input each time an error occurs, you can compare objects.\nEach time an error occurs, it'll create a new object and trigger shake.     errorHandler ( code ,   message )   { \n     this . setState ({ \n       error :   ! code   ?   null   : \n         { \n           code , \n           message , \n         } \n     }) \n   } \n\n   TextInput \n     shake = { this . state . error } \n     ... props \n   /   With this system, you can trigger shakes consecutively.\nOf course, if shake is  null  or  false  or  undefined , etc... (falsy values), it'll not trigger the shake.", 
            "title": "Using props"
        }, 
        {
            "location": "/API/header/", 
            "text": "Header with default components\n\n\nFor quick setup we provide default components, which are React Native Elements Icon for left/right buttons and React Native Text for title. You can customize them with configuration objects passed in as props.\n\n\nHeader\n\n  \nleftComponent\n=\n{{\n \nicon\n:\n \nmenu\n,\n \ncolor\n:\n \n#fff\n \n}}\n\n  \ncenterComponent\n=\n{{\n \ntext\n:\n \nMY TITLE\n,\n \nstyle\n:\n \n{\n \ncolor\n:\n \n#fff\n \n}\n \n}}\n\n  \nrightComponent\n=\n{{\n \nicon\n:\n \nhome\n,\n \ncolor\n:\n \n#fff\n \n}}\n\n\n/\n\n\n\n\n\nHeader with custom components passed in through props\n\n\nYou can pass in your custom components like this too.\n\n\nHeader\n\n  \nleftComponent\n=\n{\nMyCustomLeftComponent\n \n/\n}\n\n  \ncenterComponent\n=\n{\nMyCustomCenterComponent\n \n/\n}\n\n  \nrightComponent\n=\n{\nMyCustomRightComponent\n \n/\n}\n\n\n/\n\n\n\n\n\nHeader with mixed components\n\n\nYou can also mix the content, for example you can have default components defined by configuration combined with custom components. Passing a render function that returns a React Element is valid too.\n\n\nHeader\n\n  \nleftComponent\n=\n{\nMyCustomLeftComponent\n \n/\n}\n\n  \ncenterComponent\n=\n{\nthis\n.\nrenderCenterComponent\n()}\n\n  \nrightComponent\n=\n{{\n \nicon\n:\n \nhome\n,\n \nstyle\n:\n \n{\n \ncolor\n:\n \n#fff\n}\n \n}}\n\n\n/\n\n\n\n\n\nHeader with custom components passed in as children\n\n\nHeader\n\n  \nMyCustomLeftComponent\n \n/\n\n  \nMyCustomCenterComponent\n \n/\n\n  \nMyCustomRightComponent\n \n/\n\n\n/Header\n\n\n\n\n\nComponent precedence\n\n\nComponents defined through props take precedence over components passed in as children, so in this case only the left component with icon set to home will be rendered.\n\n\nHeader\n\n  \nleftComponent\n=\n{{\n \nicon\n:\n \nmenu\n \n}}\n\n\n\n  \nMyCustomLeftComponent\n \n/\n\n  \nMyCustomCenterComponent\n \n/\n\n  \nMyCustomRightComponent\n \n/\n\n\n/Header\n\n\n\n\n\nHeader customisability\n\n\nWe wanted the Header to be as customisable as possible, so you are free to try different combinations of props. For example, if you want to change the left, center, or right component's layout, you can adjust the \ninnerContainerStyles\n\n\nHeader\n\n  \nstatusBarProps\n=\n{{\n \nbarStyle\n:\n \nlight-content\n \n}}\n\n  \nleftComponent\n=\n{\nMyCustomLeftComponent\n \n/\n}\n\n  \ncenterComponent\n=\n{{\n \ntext\n:\n \nMY TITLE\n,\n \nstyle\n:\n \n{\n \ncolor\n:\n \n#fff\n}\n \n}}\n\n  \nouterContainerStyles\n=\n{{\n \nbackgroundColor\n:\n \n#3D6DCC\n \n}}\n\n  \ninnerContainerStyles\n=\n{{\n \njustifyContent\n:\n \nspace-around\n,}}\n\n\n/\n\n\n\n\n\nHeader Props\n\n\n\n\n\n\n\n\nprop\n\n\ndefault\n\n\ntype\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nstatusBarProps\n\n\nnone\n\n\nobject (props)\n\n\naccepts all props for StatusBar\n\n\n\n\n\n\nleftComponent\n\n\nnone\n\n\nconfiguration object for default component (icon: string, ...props for React Native Elements Icon) or a valid React Element\n\n\ndefine your left component here\n\n\n\n\n\n\ncenterComponent\n\n\nnone\n\n\nconfiguration object for default component (text: string, ...props for React Native Text component) valid React Element\n\n\ndefine your center component here\n\n\n\n\n\n\nrightComponent\n\n\nnone\n\n\nconfiguration object for default component (icon: string, ...props for React Native Elements Icon component) or a valid React Element\n\n\ndefine your right component here\n\n\n\n\n\n\nbackgroundColor\n\n\nnone\n\n\nstring\n\n\nsets backgroundColor of the parent component\n\n\n\n\n\n\nouterContainerStyles\n\n\nsource\n\n\nobject (style)\n\n\nstyling for outer container\n\n\n\n\n\n\ninnerContainerStyles\n\n\nsource\n\n\nobject (style)\n\n\nstyling for inner container", 
            "title": "Header"
        }, 
        {
            "location": "/API/header/#header-with-default-components", 
            "text": "For quick setup we provide default components, which are React Native Elements Icon for left/right buttons and React Native Text for title. You can customize them with configuration objects passed in as props.  Header \n   leftComponent = {{   icon :   menu ,   color :   #fff   }} \n   centerComponent = {{   text :   MY TITLE ,   style :   {   color :   #fff   }   }} \n   rightComponent = {{   icon :   home ,   color :   #fff   }}  /", 
            "title": "Header with default components"
        }, 
        {
            "location": "/API/header/#header-with-custom-components-passed-in-through-props", 
            "text": "You can pass in your custom components like this too.  Header \n   leftComponent = { MyCustomLeftComponent   / } \n   centerComponent = { MyCustomCenterComponent   / } \n   rightComponent = { MyCustomRightComponent   / }  /", 
            "title": "Header with custom components passed in through props"
        }, 
        {
            "location": "/API/header/#header-with-mixed-components", 
            "text": "You can also mix the content, for example you can have default components defined by configuration combined with custom components. Passing a render function that returns a React Element is valid too.  Header \n   leftComponent = { MyCustomLeftComponent   / } \n   centerComponent = { this . renderCenterComponent ()} \n   rightComponent = {{   icon :   home ,   style :   {   color :   #fff }   }}  /", 
            "title": "Header with mixed components"
        }, 
        {
            "location": "/API/header/#header-with-custom-components-passed-in-as-children", 
            "text": "Header \n   MyCustomLeftComponent   / \n   MyCustomCenterComponent   / \n   MyCustomRightComponent   /  /Header", 
            "title": "Header with custom components passed in as children"
        }, 
        {
            "location": "/API/header/#component-precedence", 
            "text": "Components defined through props take precedence over components passed in as children, so in this case only the left component with icon set to home will be rendered.  Header \n   leftComponent = {{   icon :   menu   }}  \n   MyCustomLeftComponent   / \n   MyCustomCenterComponent   / \n   MyCustomRightComponent   /  /Header", 
            "title": "Component precedence"
        }, 
        {
            "location": "/API/header/#header-customisability", 
            "text": "We wanted the Header to be as customisable as possible, so you are free to try different combinations of props. For example, if you want to change the left, center, or right component's layout, you can adjust the  innerContainerStyles  Header \n   statusBarProps = {{   barStyle :   light-content   }} \n   leftComponent = { MyCustomLeftComponent   / } \n   centerComponent = {{   text :   MY TITLE ,   style :   {   color :   #fff }   }} \n   outerContainerStyles = {{   backgroundColor :   #3D6DCC   }} \n   innerContainerStyles = {{   justifyContent :   space-around ,}}  /", 
            "title": "Header customisability"
        }, 
        {
            "location": "/API/header/#header-props", 
            "text": "prop  default  type  description      statusBarProps  none  object (props)  accepts all props for StatusBar    leftComponent  none  configuration object for default component (icon: string, ...props for React Native Elements Icon) or a valid React Element  define your left component here    centerComponent  none  configuration object for default component (text: string, ...props for React Native Text component) valid React Element  define your center component here    rightComponent  none  configuration object for default component (icon: string, ...props for React Native Elements Icon component) or a valid React Element  define your right component here    backgroundColor  none  string  sets backgroundColor of the parent component    outerContainerStyles  source  object (style)  styling for outer container    innerContainerStyles  source  object (style)  styling for inner container", 
            "title": "Header Props"
        }, 
        {
            "location": "/API/icons/", 
            "text": "Icons take the name of a \nmaterial icon\n as a prop. Use the \nicon directory\n to search for icons\n\n\n\n\nYou can override Material icons with one of the following: \nmaterial-community\n, \nfont-awesome\n, \nocticon\n, \nionicon\n, \nfoundation\n, \nevilicon\n, \nsimple-line-icon\n, \nzocial\n, or \nentypo\n by providing a type prop.\n\n\nHint: use \nreverse\n to make your icon look like a button\n\n\n\n\nCustom Icon Fonts\n\n\nRegister your own custom icons by calling \nregisterCustomIconType('customid', customFont)\n. Create a custom font by following the \n instructions for creating a custom font here\n. Also you can use \nFontello\n to generate custom icon fonts.\n\n\nIf you are looking to implement custom icon fonts, please look at our example app \nhere\n to see how to use them with React Native Elements.\n\n\nimport\n \n{\n \nIcon\n \n}\n \nfrom\n \nreact-native-elements\n\n\n\nIcon\n\n  \nname\n=\nrowing\n \n/\n\n\n\nIcon\n\n  \nname\n=\ng-translate\n\n  \ncolor\n=\n#00aced\n \n/\n\n\n\nIcon\n\n  \nname\n=\nsc-telegram\n\n  \ntype\n=\nevilicon\n\n  \ncolor\n=\n#517fa4\n\n\n/\n\n\n\nIcon\n\n  \nreverse\n\n  \nname\n=\nios-american-football\n\n  \ntype\n=\nionicon\n\n  \ncolor\n=\n#517fa4\n\n\n/\n\n\n\nIcon\n\n  \nraised\n\n  \nname\n=\nheartbeat\n\n  \ntype\n=\nfont-awesome\n\n  \ncolor\n=\n#f50\n\n  \nonPress\n=\n{()\n \n=\n \nconsole\n.\nlog\n(\nhello\n)}\n \n/\n\n\n\n\n\nIcon props\n\n\n\n\n\n\n\n\nprop\n\n\ndefault\n\n\ntype\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nname\n\n\nnone\n\n\nstring\n\n\nname of icon (required)\n\n\n\n\n\n\ntype\n\n\nmaterial\n\n\nstring\n\n\ntype (defaults to material, options are \nmaterial-community, zocial, font-awesome, octicon, ionicon, foundation, evilicon, simple-line-icon, feather or entypo\n)\n\n\n\n\n\n\nsize\n\n\n26\n\n\nnumber\n\n\nsize of icon (optional)\n\n\n\n\n\n\ncolor\n\n\nblack\n\n\nstring\n\n\ncolor of icon (optional)\n\n\n\n\n\n\niconStyle\n\n\ninherited style\n\n\nobject (style)\n\n\nadditional styling to icon (optional)\n\n\n\n\n\n\ncomponent\n\n\nView if no onPress method is defined, TouchableHighlight if onPress method is defined\n\n\nReact Native component\n\n\nupdate React Native Component (optional)\n\n\n\n\n\n\nonPress\n\n\nnone\n\n\nfunction\n\n\nonPress method for button (optional)\n\n\n\n\n\n\nonLongPress\n\n\nnone\n\n\nfunction\n\n\nonLongPress method for button (optional)\n\n\n\n\n\n\nunderlayColor\n\n\nicon color\n\n\nstring\n\n\nunderlayColor for press event\n\n\n\n\n\n\nreverse\n\n\nfalse\n\n\nboolean\n\n\nreverses color scheme (optional)\n\n\n\n\n\n\nraised\n\n\nfalse\n\n\nboolean\n\n\nadds box shadow to button (optional)\n\n\n\n\n\n\ncontainerStyle\n\n\ninherited styling\n\n\nobject (style)\n\n\nadd styling to container holding icon (optional)\n\n\n\n\n\n\nreverseColor\n\n\nwhite\n\n\nstring\n\n\nspecify reverse icon color (optional)", 
            "title": "Icons"
        }, 
        {
            "location": "/API/icons/#custom-icon-fonts", 
            "text": "Register your own custom icons by calling  registerCustomIconType('customid', customFont) . Create a custom font by following the   instructions for creating a custom font here . Also you can use  Fontello  to generate custom icon fonts.  If you are looking to implement custom icon fonts, please look at our example app  here  to see how to use them with React Native Elements.  import   {   Icon   }   from   react-native-elements  Icon \n   name = rowing   /  Icon \n   name = g-translate \n   color = #00aced   /  Icon \n   name = sc-telegram \n   type = evilicon \n   color = #517fa4  /  Icon \n   reverse \n   name = ios-american-football \n   type = ionicon \n   color = #517fa4  /  Icon \n   raised \n   name = heartbeat \n   type = font-awesome \n   color = #f50 \n   onPress = {()   =   console . log ( hello )}   /", 
            "title": "Custom Icon Fonts"
        }, 
        {
            "location": "/API/icons/#icon-props", 
            "text": "prop  default  type  description      name  none  string  name of icon (required)    type  material  string  type (defaults to material, options are  material-community, zocial, font-awesome, octicon, ionicon, foundation, evilicon, simple-line-icon, feather or entypo )    size  26  number  size of icon (optional)    color  black  string  color of icon (optional)    iconStyle  inherited style  object (style)  additional styling to icon (optional)    component  View if no onPress method is defined, TouchableHighlight if onPress method is defined  React Native component  update React Native Component (optional)    onPress  none  function  onPress method for button (optional)    onLongPress  none  function  onLongPress method for button (optional)    underlayColor  icon color  string  underlayColor for press event    reverse  false  boolean  reverses color scheme (optional)    raised  false  boolean  adds box shadow to button (optional)    containerStyle  inherited styling  object (style)  add styling to container holding icon (optional)    reverseColor  white  string  specify reverse icon color (optional)", 
            "title": "Icon props"
        }, 
        {
            "location": "/API/input/", 
            "text": "import\n \nIcon\n \nfrom\n \nreact-native-vector-icons/FontAwesome\n;\n\n\nimport\n \n{\n \nInput\n \n}\n \nfrom\n \nreact-native-elements\n;\n\n\n\nInput\n\n  \nplaceholder\n=\nBASIC INPUT\n\n\n/\n\n\n\nInput\n\n  \nplaceholder\n=\nINPUT WITH ICON\n\n  \nicon\n=\n{\n\n    \nIcon\n\n      \nname\n=\nuser\n\n      \nsize\n=\n{\n24\n}\n\n      \ncolor\n=\nblack\n\n    \n/\n\n  \n}\n\n\n/\n\n\n\nInput\n\n  \nplaceholder\n=\nINPUT WITH SHAKING EFFECT\n\n  \nshake\n=\n{\ntrue\n}\n\n\n/\n\n\n\nInput\n\n  \nplaceholder\n=\nINPUT WITH ERROR MESSAGE\n\n  \ndisplayError\n=\n{\ntrue\n}\n\n  \nerrorStyle\n=\n{{\n \ncolor\n:\n \nred\n \n}}\n\n  \nerrorMessage\n=\nENTER A VALID ERROR HERE\n\n\n/\n\n\n\n\n\nInput props\n\n\n\n\n\n\n\n\nprop\n\n\ndefault\n\n\ntype\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\ncontainerStyle\n\n\nnone\n\n\nView style (object)\n\n\nstyling for Input Component Container (optional)\n\n\n\n\n\n\nrightIcon\n\n\nnone\n\n\nReact Native Component\n\n\ndisplays an icon to the right (optional)\n\n\n\n\n\n\nrightIconContainerStyle\n\n\nnone\n\n\nView style (object)\n\n\nstyling for right Icon Component container\n\n\n\n\n\n\nleftIcon\n\n\nnone\n\n\nReact Native Component\n\n\ndisplays an icon to the left (optional)\n\n\n\n\n\n\nleftIconContainerStyle\n\n\nnone\n\n\nView style (object)\n\n\nstyling for left Icon Component container\n\n\n\n\n\n\ninputStyle\n\n\nnone\n\n\nobject\n\n\nadd styling to input component (optional)\n\n\n\n\n\n\nshake\n\n\nnone\n\n\nany\n\n\nadd shaking effect to input component (optional)\n\n\n\n\n\n\ndisplayError\n\n\nnone\n\n\nbool\n\n\ndisplays error (optional)\n\n\n\n\n\n\nerrorStyle\n\n\nnone\n\n\nobject\n\n\nadd styling to error message (optional)\n\n\n\n\n\n\nerrorMessage\n\n\nnone\n\n\nstring\n\n\nadds error message (optional)", 
            "title": "Input"
        }, 
        {
            "location": "/API/input/#input-props", 
            "text": "prop  default  type  description      containerStyle  none  View style (object)  styling for Input Component Container (optional)    rightIcon  none  React Native Component  displays an icon to the right (optional)    rightIconContainerStyle  none  View style (object)  styling for right Icon Component container    leftIcon  none  React Native Component  displays an icon to the left (optional)    leftIconContainerStyle  none  View style (object)  styling for left Icon Component container    inputStyle  none  object  add styling to input component (optional)    shake  none  any  add shaking effect to input component (optional)    displayError  none  bool  displays error (optional)    errorStyle  none  object  add styling to error message (optional)    errorMessage  none  string  adds error message (optional)", 
            "title": "Input props"
        }, 
        {
            "location": "/API/lists/", 
            "text": "Using Map Function. Implemented with avatar.\n\n\nimport\n \n{\n \nList\n,\n \nListItem\n \n}\n \nfrom\n \nreact-native-elements\n\n\n\nconst\n \nlist\n \n=\n \n[\n\n  \n{\n\n    \nname\n:\n \nAmy Farha\n,\n\n    \navatar_url\n:\n \nhttps://s3.amazonaws.com/uifaces/faces/twitter/ladylexy/128.jpg\n,\n\n    \nsubtitle\n:\n \nVice President\n\n  \n},\n\n  \n{\n\n    \nname\n:\n \nChris Jackson\n,\n\n    \navatar_url\n:\n \nhttps://s3.amazonaws.com/uifaces/faces/twitter/adhamdannaway/128.jpg\n,\n\n    \nsubtitle\n:\n \nVice Chairman\n\n  \n},\n\n  \n...\n \n// more items\n\n\n]\n\n\n\nList\n \ncontainerStyle\n=\n{{\nmarginBottom\n:\n \n20\n}}\n\n  \n{\n\n    \nlist\n.\nmap\n((\nl\n,\n \ni\n)\n \n=\n \n(\n\n      \nListItem\n\n        \nroundAvatar\n\n        \navatar\n=\n{{\nuri\n:\nl\n.\navatar_url\n}}\n\n        \nkey\n=\n{\ni\n}\n\n        \ntitle\n=\n{\nl\n.\nname\n}\n\n      \n/\n\n    \n))\n\n  \n}\n\n\n/List\n\n\n\n\n\nUsing Map Function. Implemented with link and icon.\n\n\nimport\n \n{\n \nList\n,\n \nListItem\n \n}\n \nfrom\n \nreact-native-elements\n\n\n\nconst\n \nlist\n \n=\n \n[\n\n  \n{\n\n    \ntitle\n:\n \nAppointments\n,\n\n    \nicon\n:\n \nav-timer\n\n  \n},\n\n  \n{\n\n    \ntitle\n:\n \nTrips\n,\n\n    \nicon\n:\n \nflight-takeoff\n\n  \n},\n\n  \n...\n \n// more items\n\n\n]\n\n\n\nList\n\n  \n{\n\n    \nlist\n.\nmap\n((\nitem\n,\n \ni\n)\n \n=\n \n(\n\n      \nListItem\n\n        \nkey\n=\n{\ni\n}\n\n        \ntitle\n=\n{\nitem\n.\ntitle\n}\n\n        \nleftIcon\n=\n{{\nname\n:\n \nitem\n.\nicon\n}}\n\n      \n/\n\n    \n))\n\n  \n}\n\n\n/List\n\n\n\n\n\nUsing RN ListView. Implemented with link and avatar.\n\n\nimport\n \n{\n \nList\n,\n \nListItem\n \n}\n \nfrom\n \nreact-native-elements\n\n\n\nconst\n \nlist\n \n=\n \n[\n\n  \n{\n\n    \nname\n:\n \nAmy Farha\n,\n\n    \navatar_url\n:\n \nhttps://s3.amazonaws.com/uifaces/faces/twitter/ladylexy/128.jpg\n,\n\n    \nsubtitle\n:\n \nVice President\n\n  \n},\n\n  \n{\n\n    \nname\n:\n \nChris Jackson\n,\n\n    \navatar_url\n:\n \nhttps://s3.amazonaws.com/uifaces/faces/twitter/adhamdannaway/128.jpg\n,\n\n    \nsubtitle\n:\n \nVice Chairman\n\n  \n},\n\n  \n...\n \n// more items\n\n\n]\n\n\n\nrenderRow\n \n(\nrowData\n,\n \nsectionID\n)\n \n{\n\n  \nreturn\n \n(\n\n    \nListItem\n\n      \nroundAvatar\n\n      \nkey\n=\n{\nsectionID\n}\n\n      \ntitle\n=\n{\nrowData\n.\nname\n}\n\n      \nsubtitle\n=\n{\nrowData\n.\nsubtitle\n}\n\n      \navatar\n=\n{{\nuri\n:\nrowData\n.\navatar_url\n}}\n\n    \n/\n\n  \n)\n\n\n}\n\n\n\nrender\n \n()\n \n{\n\n  \nreturn\n \n(\n\n    \nList\n\n      \nListView\n\n        \nrenderRow\n=\n{\nthis\n.\nrenderRow\n}\n\n        \ndataSource\n=\n{\nthis\n.\nstate\n.\ndataSource\n}\n\n      \n/\n\n    \n/List\n\n  \n)\n\n\n}\n\n\n\n\n\nUsing RN ListView. Implemented with custom avatar component.\n\n\nimport\n \n{\n \nList\n,\n \nListItem\n \n}\n \nfrom\n \nreact-native-elements\n\n\n\nconst\n \nlist\n \n=\n \n[\n\n  \n{\n\n    \nname\n:\n \nAmy Farha\n,\n\n    \nsubtitle\n:\n \nVice President\n\n  \n},\n\n  \n{\n\n    \nname\n:\n \nChris Jackson\n,\n\n    \navatar_url\n:\n \nhttps://s3.amazonaws.com/uifaces/faces/twitter/adhamdannaway/128.jpg\n,\n\n    \nsubtitle\n:\n \nVice Chairman\n\n  \n},\n\n  \n...\n \n// more items\n\n\n]\n\n\n\nrenderRow\n \n(\nrowData\n,\n \nsectionID\n)\n \n{\n\n  \nreturn\n \n(\n\n    \nListItem\n\n      \navatar\n=\n{\nAvatar\n\n                \nrounded\n\n                \nsource\n=\n{\nrowData\n.\navatar_url\n \n \n{\nuri\n:\n \nrowData\n.\navatar_url\n}}\n\n                \ntitle\n=\n{\nrowData\n.\nname\n[\n0\n]}\n\n              \n/\n}\n\n      \nkey\n=\n{\nsectionID\n}\n\n      \ntitle\n=\n{\nrowData\n.\nname\n}\n\n      \nsubtitle\n=\n{\nrowData\n.\nsubtitle\n}\n\n    \n/\n\n  \n)\n\n\n}\n\n\n\nrender\n \n()\n \n{\n\n  \nreturn\n \n(\n\n    \nList\n\n      \nListView\n\n        \nrenderRow\n=\n{\nthis\n.\nrenderRow\n}\n\n        \ndataSource\n=\n{\nthis\n.\nstate\n.\ndataSource\n}\n\n      \n/\n\n    \n/List\n\n  \n)\n\n\n}\n\n\n\n\n\nListItem implemented with custom View for Subtitle\n\n\nimport\n \n{\n \nList\n,\n \nListItem\n \n}\n \nfrom\n \nreact-native-elements\n\n\n\nrender\n \n()\n \n{\n\n  \nreturn\n \n(\n\n    \nList\n\n      \nListItem\n\n        \nroundAvatar\n\n        \ntitle\n=\nLimited supply! Its like digital gold!\n\n        \nsubtitle\n=\n{\n\n          \nView\n \nstyle\n=\n{\nstyles\n.\nsubtitleView\n}\n\n            \nImage\n \nsource\n=\n{\nrequire\n(\n../images/rating.png\n)}\n \nstyle\n=\n{\nstyles\n.\nratingImage\n}\n/\n\n            \nText\n \nstyle\n=\n{\nstyles\n.\nratingText\n}\n5\n \nmonths\n \nago\n/Text\n\n          \n/View\n\n        \n}\n\n        \navatar\n=\n{\nrequire\n(\n../images/avatar1.jpg\n)}\n\n      \n/\n\n    \n/List\n\n  \n)\n\n\n}\n\n\n\nstyles\n \n=\n \nStyleSheet\n.\ncreate\n({\n\n  \nsubtitleView\n:\n \n{\n\n    \nflexDirection\n:\n \nrow\n,\n\n    \npaddingLeft\n:\n \n10\n,\n\n    \npaddingTop\n:\n \n5\n\n  \n},\n\n  \nratingImage\n:\n \n{\n\n    \nheight\n:\n \n19.21\n,\n\n    \nwidth\n:\n \n100\n\n  \n},\n\n  \nratingText\n:\n \n{\n\n    \npaddingLeft\n:\n \n10\n,\n\n    \ncolor\n:\n \ngrey\n\n  \n}\n\n\n})\n\n\n\n\n\nList Props\n\n\n\n\n\n\n\n\nprop\n\n\ndefault\n\n\ntype\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\ncontainerStyle\n\n\nmarginTop: 20, borderTopWidth: 1, borderBottomWidth: 1, borderBottomColor: #cbd2d9\n\n\nobject (style)\n\n\nstyle the list container\n\n\n\n\n\n\n\n\nListItem props\n\n\n\n\n\n\n\n\nprop\n\n\ndefault\n\n\ntype\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\navatar\n\n\nnone\n\n\nobject (source)\n\n\nleft avatar (optional). This is the \nReact Native Image\n \nsource\n prop. Avatar can be used in parallel to leftIcon if needed.\n\n\n\n\n\n\navatarStyle\n\n\nnone\n\n\nobject (style)\n\n\navatar styling (optional). This is the \nReact Native Image\n \nstyle\n prop\n\n\n\n\n\n\navatarContainerStyle\n\n\nnone\n\n\nobject (style)\n\n\nAvatar outer container styling (optional)\n\n\n\n\n\n\navatarOverlayContainerStyle\n\n\nnone\n\n\nobject (style)\n\n\nAvatar overlay container styling (optional)\n\n\n\n\n\n\nchevronColor\n\n\n#bdc6cf\n\n\nstring\n\n\nset chevron color\n\n\n\n\n\n\ncomponent\n\n\nView or TouchableHighlight if onPress method is added as prop\n\n\nReact Native element\n\n\nreplace element with custom element (optional)\n\n\n\n\n\n\ncontainerStyle\n\n\nnone\n\n\nobject (style)\n\n\nadditional main container styling (optional)\n\n\n\n\n\n\nwrapperStyle\n\n\nnone\n\n\nobject (style)\n\n\nadditional wrapper styling (optional)\n\n\n\n\n\n\nunderlayColor\n\n\nwhite\n\n\nstring\n\n\ndefine underlay color for TouchableHighlight (optional)\n\n\n\n\n\n\nfontFamily\n\n\nHelveticaNeue (iOS), Sans Serif (android)\n\n\nstring\n\n\nspecify different font family\n\n\n\n\n\n\nhideChevron\n\n\nfalse\n\n\nboolean\n\n\nset if you do not want a chevron (optional)\n\n\n\n\n\n\nonPress\n\n\nnone\n\n\nfunction\n\n\nonPress method for link (optional)\n\n\n\n\n\n\nonLongPress\n\n\nnone\n\n\nfunction\n\n\nonLongPress method for link (optional)\n\n\n\n\n\n\nroundAvatar\n\n\nfalse\n\n\nboolean\n\n\nmake left avatar round\n\n\n\n\n\n\ntitle\n\n\nnone\n\n\nstring, number or object\n\n\nmain title for list item, can be text or custom view (required)\n\n\n\n\n\n\ntitleNumberOfLines\n\n\n1\n\n\nnumber\n\n\nNumber of lines for Title\n\n\n\n\n\n\ntitleStyle\n\n\nnone\n\n\nobject (style)\n\n\nadditional title styling (optional)\n\n\n\n\n\n\ntitleContainerStyle\n\n\nnone\n\n\nobject (style)\n\n\nprovide styling for title container\n\n\n\n\n\n\nsubtitle\n\n\nnone\n\n\nstring, number or object\n\n\nsubtitle text or custom view (optional)\n\n\n\n\n\n\nsubtitleNumberOfLines\n\n\nnumber\n\n\n1\n\n\nNumber of lines for Subtitle\n\n\n\n\n\n\nsubtitleContainerStyle\n\n\nnone\n\n\nobject (style)\n\n\nprovide styling for subtitle container\n\n\n\n\n\n\nsubtitleStyle\n\n\nnone\n\n\nobject (style)\n\n\nadditional subtitle styling (optional )\n\n\n\n\n\n\nrightTitle\n\n\nnone\n\n\nstring\n\n\nprovide a rightTitle to have a title show up on the right side of the button\n\n\n\n\n\n\nrightTitleNumberOfLines\n\n\n1\n\n\nnumber\n\n\nNumber of lines for Right Title\n\n\n\n\n\n\nrightTitleContainerStyle\n\n\nflex: 1, alignItems: 'flex-end', justifyContent: 'center'\n\n\nobject (style)\n\n\nstyle the outer container of the rightTitle text\n\n\n\n\n\n\nrightTitleStyle\n\n\nmarginRight: 5, color: '#bdc6cf'\n\n\nobject (style)\n\n\nstyle the text of the rightTitle text\n\n\n\n\n\n\nlabel\n\n\nnone\n\n\nreact native component\n\n\nadd a label with your own styling by providing a label={\n} prop to ListItem\n\n\n\n\n\n\nleftIcon\n\n\nnone\n\n\nobject {name, color, style, type} (type defaults to material icons) \n \nOR\n \n React Native element\n\n\nicon configuration for left icon (optional), either a name from the icon library (like material) or a React Native element like \nImage\n. leftIcon can be used in parallel to avatar if needed.\n\n\n\n\n\n\nleftIconOnPress\n\n\nfunction\n\n\nnone\n\n\nAttaches an onPress on left Icon\n\n\n\n\n\n\nleftIconOnLongPress\n\n\nfunction\n\n\nnone\n\n\nAttaches an onLongPress on left Icon\n\n\n\n\n\n\nleftIconUnderlayColor\n\n\nstring\n\n\nwhite\n\n\nUnderlay color for left Icon\n\n\n\n\n\n\nrightIcon\n\n\n{name: 'chevron-right'}\n\n\nobject {name, color, style, type} (type defaults to material icons) \n \nOR\n \n React Native element\n\n\nicon configuration for right icon (optional), either a name from the icon library (like material) or a React Native element like \nImage\n. Shows up unless hideChevron is set\n\n\n\n\n\n\nonPressRightIcon\n\n\nfunction\n\n\nnone\n\n\nAttaches an onPress on right Icon\n\n\n\n\n\n\nswitchButton\n\n\nfalse\n\n\nboolean\n\n\nadd a switch to the right side of your component (Note: in order to display the switchButton you need to add the \nhideChevron\n prop as well. Snack demo here: \nhttps://snack.expo.io/SJPQNScUZ\n)\n\n\n\n\n\n\nonSwitch\n\n\nnone\n\n\nfunction\n\n\nadd a callback function when the switch is toggled\n\n\n\n\n\n\nswitchDisabled\n\n\n\n\nboolean\n\n\nIf true the user won't be able to toggle the switch. Default value is false.\n\n\n\n\n\n\nswitchOnTintColor\n\n\n\n\nstring\n\n\nBackground color when the switch is turned on.\n\n\n\n\n\n\nswitchThumbTintColor\n\n\n\n\nstring\n\n\nColor of the foreground switch grip.\n\n\n\n\n\n\nswitchTintColor\n\n\n\n\nstring\n\n\nBorder color on iOS and background color on Android when the switch is turned off.\n\n\n\n\n\n\nswitched\n\n\n\n\nboolean\n\n\nThe value of the switch. If true the switch will be turned on. Default value is false.\n\n\n\n\n\n\ntextInput\n\n\n\n\nPropTypes.bool\n\n\nWhether to have the right title area be an input text component.\n\n\n\n\n\n\ntextInputAutoCapitalize\n\n\n\n\nstring\n\n\nCan be one of the following: 'none', 'sentences', 'words', 'characters'.\n\n\n\n\n\n\ntextInputAutoCorrect\n\n\n\n\nboolean\n\n\nCan tell TextInput to automatically capitalize certain characters.\n\n\n\n\n\n\ntextInputAutoFocus\n\n\n\n\nboolean\n\n\nIf true, focuses the input on componentDidMount. The default value is false.\n\n\n\n\n\n\ntextInputEditable\n\n\n\n\nboolean\n\n\nIf false, text is not editable. The default value is true.\n\n\n\n\n\n\ntextInputKeyboardType\n\n\n\n\nstring\n\n\nCan be one of the following: 'default', 'email-address', 'numeric', 'phone-pad', 'ascii-capable', 'numbers-and-punctuation', 'url', 'number-pad', 'name-phone-pad', 'decimal-pad', 'twitter', 'web-search'\n\n\n\n\n\n\ntextInputMaxLength\n\n\n\n\nnumber\n\n\nLimits the maximum number of characters that can be entered.\n\n\n\n\n\n\ntextInputMultiline\n\n\n\n\nboolean\n\n\nIf true, the text input can be multiple lines. The default value is false.\n\n\n\n\n\n\ntextInputOnChangeText\n\n\n\n\nfunction\n\n\nCallback that is called when the text input's text changes. Changed text is passed as an argument to the callback handler.\n\n\n\n\n\n\ntextInputOnFocus\n\n\n\n\nfunction\n\n\nCallback that is called when the text input is focused.\n\n\n\n\n\n\ntextInputValue\n\n\n\n\nstring\n\n\nManually set value of the input\n\n\n\n\n\n\ntextInputSecure\n\n\n\n\nboolean\n\n\nIf true, obscures the text entered so that sensitive text like passwords stay secure.\n\n\n\n\n\n\ntextInputStyle\n\n\n\n\nobject (style)\n\n\nStyle for the input text\n\n\n\n\n\n\ntextInputContainerStyle\n\n\n\n\nobject (style)\n\n\nStyle for the container surrounding the input text\n\n\n\n\n\n\ntextInputPlaceholder\n\n\n\n\nstring\n\n\nPlaceholder for the text input\n\n\n\n\n\n\ntextInputOnBlur\n\n\n\n\nfunction\n\n\nCallback that is called when the text input is blurred.\n\n\n\n\n\n\ntextInputSelectTextOnFocus\n\n\n\n\nboolean\n\n\nIf true, all text will automatically be selected on focus.\n\n\n\n\n\n\ntextInputReturnKeyType\n\n\n\n\nstring\n\n\nDetermines how the return key should look. For more info see \nthe React Native docs\n\n\n\n\n\n\ndisabled\n\n\n\n\nboolean\n\n\nIf true the user won't be able to perform any action on the list item. Default value is false.\n\n\n\n\n\n\ndisabledStyle\n\n\nnone\n\n\nobject (style)\n\n\nSpecific styling to be used when list item is disabled.\n\n\n\n\n\n\n\n\nBadges\n\n\n\n\nExample badge usage\n\nListItem\n\n  \n...\n\n  \nbadge\n=\n{{\n \nvalue\n:\n \n3\n,\n \ntextStyle\n:\n \n{\n \ncolor\n:\n \norange\n \n},\n \ncontainerStyle\n:\n \n{\n \nmarginTop\n:\n \n-\n20\n \n}\n \n}}\n\n\n/\n\n\n\nListItem\n\n  \n...\n\n  \nbadge\n=\n{{\n \nelement\n:\n \nMyCustomElement\n \n}}\n\n\n/\n\n\n\n\nBadge props\n\n\n\n\n\n\n\n\nprop\n\n\ndefault\n\n\ntype\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nbadge\n\n\nnone\n\n\nobject, accepts the following properties: value (string), containerStyle (object), textStyle (object). You can override the default badge by providing your own component with it's own styling by providing badge={{ element: \n }}\n\n\nadd a badge to the ListItem by using this prop", 
            "title": "Lists"
        }, 
        {
            "location": "/API/lists/#using-map-function-implemented-with-avatar", 
            "text": "import   {   List ,   ListItem   }   from   react-native-elements  const   list   =   [ \n   { \n     name :   Amy Farha , \n     avatar_url :   https://s3.amazonaws.com/uifaces/faces/twitter/ladylexy/128.jpg , \n     subtitle :   Vice President \n   }, \n   { \n     name :   Chris Jackson , \n     avatar_url :   https://s3.amazonaws.com/uifaces/faces/twitter/adhamdannaway/128.jpg , \n     subtitle :   Vice Chairman \n   }, \n   ...   // more items  ]  List   containerStyle = {{ marginBottom :   20 }} \n   { \n     list . map (( l ,   i )   =   ( \n       ListItem \n         roundAvatar \n         avatar = {{ uri : l . avatar_url }} \n         key = { i } \n         title = { l . name } \n       / \n     )) \n   }  /List", 
            "title": "Using Map Function. Implemented with avatar."
        }, 
        {
            "location": "/API/lists/#using-map-function-implemented-with-link-and-icon", 
            "text": "import   {   List ,   ListItem   }   from   react-native-elements  const   list   =   [ \n   { \n     title :   Appointments , \n     icon :   av-timer \n   }, \n   { \n     title :   Trips , \n     icon :   flight-takeoff \n   }, \n   ...   // more items  ]  List \n   { \n     list . map (( item ,   i )   =   ( \n       ListItem \n         key = { i } \n         title = { item . title } \n         leftIcon = {{ name :   item . icon }} \n       / \n     )) \n   }  /List", 
            "title": "Using Map Function. Implemented with link and icon."
        }, 
        {
            "location": "/API/lists/#using-rn-listview-implemented-with-link-and-avatar", 
            "text": "import   {   List ,   ListItem   }   from   react-native-elements  const   list   =   [ \n   { \n     name :   Amy Farha , \n     avatar_url :   https://s3.amazonaws.com/uifaces/faces/twitter/ladylexy/128.jpg , \n     subtitle :   Vice President \n   }, \n   { \n     name :   Chris Jackson , \n     avatar_url :   https://s3.amazonaws.com/uifaces/faces/twitter/adhamdannaway/128.jpg , \n     subtitle :   Vice Chairman \n   }, \n   ...   // more items  ]  renderRow   ( rowData ,   sectionID )   { \n   return   ( \n     ListItem \n       roundAvatar \n       key = { sectionID } \n       title = { rowData . name } \n       subtitle = { rowData . subtitle } \n       avatar = {{ uri : rowData . avatar_url }} \n     / \n   )  }  render   ()   { \n   return   ( \n     List \n       ListView \n         renderRow = { this . renderRow } \n         dataSource = { this . state . dataSource } \n       / \n     /List \n   )  }", 
            "title": "Using RN ListView. Implemented with link and avatar."
        }, 
        {
            "location": "/API/lists/#using-rn-listview-implemented-with-custom-avatar-component", 
            "text": "import   {   List ,   ListItem   }   from   react-native-elements  const   list   =   [ \n   { \n     name :   Amy Farha , \n     subtitle :   Vice President \n   }, \n   { \n     name :   Chris Jackson , \n     avatar_url :   https://s3.amazonaws.com/uifaces/faces/twitter/adhamdannaway/128.jpg , \n     subtitle :   Vice Chairman \n   }, \n   ...   // more items  ]  renderRow   ( rowData ,   sectionID )   { \n   return   ( \n     ListItem \n       avatar = { Avatar \n                 rounded \n                 source = { rowData . avatar_url     { uri :   rowData . avatar_url }} \n                 title = { rowData . name [ 0 ]} \n               / } \n       key = { sectionID } \n       title = { rowData . name } \n       subtitle = { rowData . subtitle } \n     / \n   )  }  render   ()   { \n   return   ( \n     List \n       ListView \n         renderRow = { this . renderRow } \n         dataSource = { this . state . dataSource } \n       / \n     /List \n   )  }", 
            "title": "Using RN ListView. Implemented with custom avatar component."
        }, 
        {
            "location": "/API/lists/#listitem-implemented-with-custom-view-for-subtitle", 
            "text": "import   {   List ,   ListItem   }   from   react-native-elements  render   ()   { \n   return   ( \n     List \n       ListItem \n         roundAvatar \n         title = Limited supply! Its like digital gold! \n         subtitle = { \n           View   style = { styles . subtitleView } \n             Image   source = { require ( ../images/rating.png )}   style = { styles . ratingImage } / \n             Text   style = { styles . ratingText } 5   months   ago /Text \n           /View \n         } \n         avatar = { require ( ../images/avatar1.jpg )} \n       / \n     /List \n   )  }  styles   =   StyleSheet . create ({ \n   subtitleView :   { \n     flexDirection :   row , \n     paddingLeft :   10 , \n     paddingTop :   5 \n   }, \n   ratingImage :   { \n     height :   19.21 , \n     width :   100 \n   }, \n   ratingText :   { \n     paddingLeft :   10 , \n     color :   grey \n   }  })", 
            "title": "ListItem implemented with custom View for Subtitle"
        }, 
        {
            "location": "/API/lists/#list-props", 
            "text": "prop  default  type  description      containerStyle  marginTop: 20, borderTopWidth: 1, borderBottomWidth: 1, borderBottomColor: #cbd2d9  object (style)  style the list container", 
            "title": "List Props"
        }, 
        {
            "location": "/API/lists/#listitem-props", 
            "text": "prop  default  type  description      avatar  none  object (source)  left avatar (optional). This is the  React Native Image   source  prop. Avatar can be used in parallel to leftIcon if needed.    avatarStyle  none  object (style)  avatar styling (optional). This is the  React Native Image   style  prop    avatarContainerStyle  none  object (style)  Avatar outer container styling (optional)    avatarOverlayContainerStyle  none  object (style)  Avatar overlay container styling (optional)    chevronColor  #bdc6cf  string  set chevron color    component  View or TouchableHighlight if onPress method is added as prop  React Native element  replace element with custom element (optional)    containerStyle  none  object (style)  additional main container styling (optional)    wrapperStyle  none  object (style)  additional wrapper styling (optional)    underlayColor  white  string  define underlay color for TouchableHighlight (optional)    fontFamily  HelveticaNeue (iOS), Sans Serif (android)  string  specify different font family    hideChevron  false  boolean  set if you do not want a chevron (optional)    onPress  none  function  onPress method for link (optional)    onLongPress  none  function  onLongPress method for link (optional)    roundAvatar  false  boolean  make left avatar round    title  none  string, number or object  main title for list item, can be text or custom view (required)    titleNumberOfLines  1  number  Number of lines for Title    titleStyle  none  object (style)  additional title styling (optional)    titleContainerStyle  none  object (style)  provide styling for title container    subtitle  none  string, number or object  subtitle text or custom view (optional)    subtitleNumberOfLines  number  1  Number of lines for Subtitle    subtitleContainerStyle  none  object (style)  provide styling for subtitle container    subtitleStyle  none  object (style)  additional subtitle styling (optional )    rightTitle  none  string  provide a rightTitle to have a title show up on the right side of the button    rightTitleNumberOfLines  1  number  Number of lines for Right Title    rightTitleContainerStyle  flex: 1, alignItems: 'flex-end', justifyContent: 'center'  object (style)  style the outer container of the rightTitle text    rightTitleStyle  marginRight: 5, color: '#bdc6cf'  object (style)  style the text of the rightTitle text    label  none  react native component  add a label with your own styling by providing a label={ } prop to ListItem    leftIcon  none  object {name, color, style, type} (type defaults to material icons)    OR    React Native element  icon configuration for left icon (optional), either a name from the icon library (like material) or a React Native element like  Image . leftIcon can be used in parallel to avatar if needed.    leftIconOnPress  function  none  Attaches an onPress on left Icon    leftIconOnLongPress  function  none  Attaches an onLongPress on left Icon    leftIconUnderlayColor  string  white  Underlay color for left Icon    rightIcon  {name: 'chevron-right'}  object {name, color, style, type} (type defaults to material icons)    OR    React Native element  icon configuration for right icon (optional), either a name from the icon library (like material) or a React Native element like  Image . Shows up unless hideChevron is set    onPressRightIcon  function  none  Attaches an onPress on right Icon    switchButton  false  boolean  add a switch to the right side of your component (Note: in order to display the switchButton you need to add the  hideChevron  prop as well. Snack demo here:  https://snack.expo.io/SJPQNScUZ )    onSwitch  none  function  add a callback function when the switch is toggled    switchDisabled   boolean  If true the user won't be able to toggle the switch. Default value is false.    switchOnTintColor   string  Background color when the switch is turned on.    switchThumbTintColor   string  Color of the foreground switch grip.    switchTintColor   string  Border color on iOS and background color on Android when the switch is turned off.    switched   boolean  The value of the switch. If true the switch will be turned on. Default value is false.    textInput   PropTypes.bool  Whether to have the right title area be an input text component.    textInputAutoCapitalize   string  Can be one of the following: 'none', 'sentences', 'words', 'characters'.    textInputAutoCorrect   boolean  Can tell TextInput to automatically capitalize certain characters.    textInputAutoFocus   boolean  If true, focuses the input on componentDidMount. The default value is false.    textInputEditable   boolean  If false, text is not editable. The default value is true.    textInputKeyboardType   string  Can be one of the following: 'default', 'email-address', 'numeric', 'phone-pad', 'ascii-capable', 'numbers-and-punctuation', 'url', 'number-pad', 'name-phone-pad', 'decimal-pad', 'twitter', 'web-search'    textInputMaxLength   number  Limits the maximum number of characters that can be entered.    textInputMultiline   boolean  If true, the text input can be multiple lines. The default value is false.    textInputOnChangeText   function  Callback that is called when the text input's text changes. Changed text is passed as an argument to the callback handler.    textInputOnFocus   function  Callback that is called when the text input is focused.    textInputValue   string  Manually set value of the input    textInputSecure   boolean  If true, obscures the text entered so that sensitive text like passwords stay secure.    textInputStyle   object (style)  Style for the input text    textInputContainerStyle   object (style)  Style for the container surrounding the input text    textInputPlaceholder   string  Placeholder for the text input    textInputOnBlur   function  Callback that is called when the text input is blurred.    textInputSelectTextOnFocus   boolean  If true, all text will automatically be selected on focus.    textInputReturnKeyType   string  Determines how the return key should look. For more info see  the React Native docs    disabled   boolean  If true the user won't be able to perform any action on the list item. Default value is false.    disabledStyle  none  object (style)  Specific styling to be used when list item is disabled.", 
            "title": "ListItem props"
        }, 
        {
            "location": "/API/lists/#badges", 
            "text": "Example badge usage ListItem \n   ... \n   badge = {{   value :   3 ,   textStyle :   {   color :   orange   },   containerStyle :   {   marginTop :   - 20   }   }}  /  ListItem \n   ... \n   badge = {{   element :   MyCustomElement   }}  /", 
            "title": "Badges"
        }, 
        {
            "location": "/API/lists/#badge-props", 
            "text": "prop  default  type  description      badge  none  object, accepts the following properties: value (string), containerStyle (object), textStyle (object). You can override the default badge by providing your own component with it's own styling by providing badge={{ element:   }}  add a badge to the ListItem by using this prop", 
            "title": "Badge props"
        }, 
        {
            "location": "/API/overlay/", 
            "text": "Overlay\n\n  \nisVisible\n=\n{\nthis\n.\nstate\n.\nisVisible\n}\n\n\n\n  \nText\nHello\n \nfrom\n \nOverlay\n!\n/Text\n\n\n/Overlay\n\n\n\n{\n\n  \nthis\n.\nstate\n.\nvisible\n \n \n(\n\n    \nOverlay\n \nisVisible\n\n      \nText\nHello\n \nfrom\n \nOverlay\n!\n/Text\n\n    \n/Overlay\n\n  \n)\n\n\n}\n\n\n\nOverlay\n\n  \nisVisible\n=\n{\nthis\n.\nstate\n.\nisVisible\n}\n\n  \nwindowBackgroundColor\n=\nrgba(255, 255, 255, .5)\n\n  \noverlayBackgroundColor\n=\nred\n\n  \nwidth\n=\nauto\n\n  \nheight\n=\nauto\n\n\n\n  \nText\nHello\n \nfrom\n \nOverlay\n!\n/Text\n\n\n/Overlay\n\n\n\n\n\nOverlay Props\n\n\n\n\n\n\n\n\nprop\n\n\ndefault\n\n\ntype\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nchildren\n\n\nnone\n\n\nany\n\n\nWhat the modal will render\n\n\n\n\n\n\nisVisible\n\n\nnone\n\n\nboolean\n\n\nIf true, the overlay is visible\n\n\n\n\n\n\ncontainerStyle\n\n\nvarious styles\n\n\nobject (style)\n\n\nStyle of the overlay container\n\n\n\n\n\n\noverlayStyle\n\n\nvarious styles\n\n\nobject (style)\n\n\nstyle of the actual overlay\n\n\n\n\n\n\noverlayBackgroundColor\n\n\nwhite\n\n\nstring\n\n\nBackground color of the actual overlay\n\n\n\n\n\n\nwindowBackgroundColor\n\n\nrgba(0, 0, 0, .5)\n\n\nstring\n\n\nBackground color for the overlay background\n\n\n\n\n\n\nborderRadius\n\n\n3\n\n\nnumber\n\n\nBorder radius for the overlay\n\n\n\n\n\n\nwidth\n\n\nwindow width - 80\n\n\nstring or number\n\n\nWidth of the overlay\n\n\n\n\n\n\nheight\n\n\nwindow height - 180\n\n\nstring or number\n\n\nHeight of the overlay\n\n\n\n\n\n\nfullScreen\n\n\nnone\n\n\nboolean\n\n\nIf set to true, the modal will take up the entire screen width and height", 
            "title": "Overlay"
        }, 
        {
            "location": "/API/overlay/#overlay-props", 
            "text": "prop  default  type  description      children  none  any  What the modal will render    isVisible  none  boolean  If true, the overlay is visible    containerStyle  various styles  object (style)  Style of the overlay container    overlayStyle  various styles  object (style)  style of the actual overlay    overlayBackgroundColor  white  string  Background color of the actual overlay    windowBackgroundColor  rgba(0, 0, 0, .5)  string  Background color for the overlay background    borderRadius  3  number  Border radius for the overlay    width  window width - 80  string or number  Width of the overlay    height  window height - 180  string or number  Height of the overlay    fullScreen  none  boolean  If set to true, the modal will take up the entire screen width and height", 
            "title": "Overlay Props"
        }, 
        {
            "location": "/API/pricing/", 
            "text": "import\n \n{\n \nPricingCard\n \n}\n \nfrom\n \nreact-native-elements\n\n\n\nPricingCard\n\n  \ncolor\n=\n#4f9deb\n\n  \ntitle\n=\nFree\n\n  \nprice\n=\n$0\n\n  \ninfo\n=\n{[\n1 User\n,\n \nBasic Support\n,\n \nAll Core Features\n]}\n\n  \nbutton\n=\n{{\n \ntitle\n:\n \nGET STARTED\n,\n \nicon\n:\n \nflight-takeoff\n \n}}\n\n\n/\n\n\n\n\n\nPricingCard props\n\n\n\n\n\n\n\n\nprop\n\n\ndefault\n\n\ntype\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\ntitle\n\n\nnone\n\n\nstring\n\n\ntitle (required)\n\n\n\n\n\n\nprice\n\n\nnone\n\n\nstring\n\n\nprice (required)\n\n\n\n\n\n\ncolor\n\n\nnone\n\n\nstring\n\n\ncolor scheme for button \n title (required)\n\n\n\n\n\n\ninfo\n\n\nnone\n\n\narray of strings\n\n\npricing information (optional)\n\n\n\n\n\n\nbutton\n\n\nnone\n\n\nobject {title, icon, buttonStyle}\n\n\nbutton information (required)\n\n\n\n\n\n\nonButtonPress\n\n\nnone\n\n\nany\n\n\nfunction to be run when button is pressed\n\n\n\n\n\n\ncontainerStyle\n\n\ninherited styling\n\n\nobject (style)\n\n\nouter component styling (optional)\n\n\n\n\n\n\nwrapperStyle\n\n\ninherited styling\n\n\nobject (style)\n\n\ninner wrapper component styling (optional)\n\n\n\n\n\n\ntitleFont\n\n\nSystem font (font weight 800) (iOS), Sans Serif Black (android)\n\n\nstring\n\n\nspecify title font family\n\n\n\n\n\n\npricingFont\n\n\nSystem font (font weight 700) (iOS), Sans Serif Bold (android)\n\n\nstring\n\n\nspecify pricing font family\n\n\n\n\n\n\ninfoFont\n\n\nSystem font bold (iOS), Sans Serif Bold (android)\n\n\nstring\n\n\nspecify pricing information font family\n\n\n\n\n\n\nbuttonFont\n\n\nSystem font (iOS), Sans Serif (android)\n\n\nstring\n\n\nspecify button font family", 
            "title": "Pricing"
        }, 
        {
            "location": "/API/pricing/#pricingcard-props", 
            "text": "prop  default  type  description      title  none  string  title (required)    price  none  string  price (required)    color  none  string  color scheme for button   title (required)    info  none  array of strings  pricing information (optional)    button  none  object {title, icon, buttonStyle}  button information (required)    onButtonPress  none  any  function to be run when button is pressed    containerStyle  inherited styling  object (style)  outer component styling (optional)    wrapperStyle  inherited styling  object (style)  inner wrapper component styling (optional)    titleFont  System font (font weight 800) (iOS), Sans Serif Black (android)  string  specify title font family    pricingFont  System font (font weight 700) (iOS), Sans Serif Bold (android)  string  specify pricing font family    infoFont  System font bold (iOS), Sans Serif Bold (android)  string  specify pricing information font family    buttonFont  System font (iOS), Sans Serif (android)  string  specify button font family", 
            "title": "PricingCard props"
        }, 
        {
            "location": "/API/rating/", 
            "text": "An extendable Ratings components for React Native with gestures and an intuitive API\n\n\n\n\nThis component was inspired from \nreact-native-ratings\n by \nMonte Thakkar\n.\n\n\n\n\nDemo\n\n\n\n\nimport\n \n{\n \nRating\n \n}\n \nfrom\n \nreact-native-elements\n;\n\n\n\nratingCompleted\n(\nrating\n)\n \n{\n\n  \nconsole\n.\nlog\n(\nRating is: \n \n+\n \nrating\n)\n\n\n}\n\n\n\nRating\n\n  \nshowRating\n\n  \nonFinishRating\n=\n{\nthis\n.\nratingCompleted\n}\n\n  \nstyle\n=\n{{\n \npaddingVertical\n:\n \n10\n \n}}\n\n\n/\n\n\n\nRating\n\n  \nshowRating\n\n  \ntype\n=\nstar\n\n  \nfractions\n=\n{\n1\n}\n\n  \nstartingValue\n=\n{\n3.6\n}\n\n  \nreadonly\n\n  \nimageSize\n=\n{\n40\n}\n\n  \nonFinishRating\n=\n{\nthis\n.\nratingCompleted\n}\n\n  \nstyle\n=\n{{\n \npaddingVertical\n:\n \n10\n \n}}\n\n\n/\n\n\n\nRating\n\n  \ntype\n=\nheart\n\n  \nratingCount\n=\n{\n3\n}\n\n  \nfractions\n=\n{\n2\n}\n\n  \nstartingValue\n=\n{\n1.57\n}\n\n  \nimageSize\n=\n{\n40\n}\n\n  \nonFinishRating\n=\n{\nthis\n.\nratingCompleted\n}\n\n  \nshowRating\n\n  \nstyle\n=\n{{\n \npaddingVertical\n:\n \n10\n \n}}\n\n\n/\n\n\n\n\nconst\n \nWATER_IMAGE\n \n=\n \nrequire\n(\n./water.png\n)\n\n\n\nRating\n\n  \ntype\n=\ncustom\n\n  \nratingImage\n=\n{\nWATER_IMAGE\n}\n\n  \nratingColor\n=\n#3498db\n\n  \nratingBackgroundColor\n=\n#c8c7c8\n\n  \nratingCount\n=\n{\n10\n}\n\n  \nimageSize\n=\n{\n30\n}\n\n  \nonFinishRating\n=\n{\nthis\n.\nratingCompleted\n}\n\n  \nstyle\n=\n{{\n \npaddingVertical\n:\n \n10\n \n}}\n\n\n/\n\n\n\n\n\nRead-only mode\n\n\nconst\n \n{\n \nrating\n \n}\n \n=\n \nthis\n.\nprops\n;\n\n\n\nRating\n\n  \nimageSize\n=\n{\n20\n}\n\n  \nreadonly\n\n  \nstartingValue\n=\n{\nrating\n}\n\n  \nstyle\n=\n{{\n \nstyles\n.\nrating\n \n}}\n\n\n/\n\n\n\n\n\n\n\nFractions\n\n\nRating\n \nshowRating\n \nfractions\n=\n{1}\n \nstartingValue\n=\n{3.3}\n \n/\n\n\n\n\n\n\n\nRating Props\n\n\n\n\n\n\n\n\nprop\n\n\ndefault\n\n\ntype\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nonFinishRating\n\n\nnone\n\n\nfunction\n\n\nCallback method when the user finishes rating. Gives you the final rating value as a whole number \n(required)\n\n\n\n\n\n\ntype\n\n\nstar\n\n\nstring\n\n\nChoose one of the built-in types: \nstar\n, \nrocket\n, \nbell\n, \nheart\n or use type \ncustom\n to render a custom image (optional)\n\n\n\n\n\n\nratingImage\n\n\nstar\n\n\nstring\n\n\nPass in a custom image source; use this along with \ntype='custom'\n prop above (optional)\n\n\n\n\n\n\nratingColor\n\n\n#f1c40f\n\n\nstring (color)\n\n\nPass in a custom fill-color for the rating icon; use this along with \ntype='custom'\n prop above (optional)\n\n\n\n\n\n\nratingBackgroundColor\n\n\nwhite\n\n\nstring (color)\n\n\nPass in a custom background-fill-color for the rating icon; use this along with \ntype='custom'\n prop above (optional)\n\n\n\n\n\n\nratingCount\n\n\n5\n\n\nnumber\n\n\nThe number of rating images to display (optional)\n\n\n\n\n\n\nimageSize\n\n\n50\n\n\nnumber\n\n\nThe size of each rating image (optional)\n\n\n\n\n\n\nshowRating\n\n\nnone\n\n\nboolean\n\n\nDisplays the Built-in Rating UI to show the rating value in real-time (optional)\n\n\n\n\n\n\nreadonly\n\n\nfalse\n\n\nboolean\n\n\nWhether the rating can be modiefied by the user (optional)\n\n\n\n\n\n\nstartingValue\n\n\nratingCount / 2\n\n\nnumber\n\n\nThe initial rating to render (optional)\n\n\n\n\n\n\nfractions\n\n\nundefined\n\n\nnumber\n\n\nThe number of decimal places for the rating value; must be between 0 and 20 (optional)\n\n\n\n\n\n\nstyle\n\n\nnone\n\n\nfunction\n\n\nExposes style prop to add additonal styling to the container view (optional)", 
            "title": "Rating"
        }, 
        {
            "location": "/API/rating/#demo", 
            "text": "import   {   Rating   }   from   react-native-elements ;  ratingCompleted ( rating )   { \n   console . log ( Rating is:    +   rating )  }  Rating \n   showRating \n   onFinishRating = { this . ratingCompleted } \n   style = {{   paddingVertical :   10   }}  /  Rating \n   showRating \n   type = star \n   fractions = { 1 } \n   startingValue = { 3.6 } \n   readonly \n   imageSize = { 40 } \n   onFinishRating = { this . ratingCompleted } \n   style = {{   paddingVertical :   10   }}  /  Rating \n   type = heart \n   ratingCount = { 3 } \n   fractions = { 2 } \n   startingValue = { 1.57 } \n   imageSize = { 40 } \n   onFinishRating = { this . ratingCompleted } \n   showRating \n   style = {{   paddingVertical :   10   }}  /  const   WATER_IMAGE   =   require ( ./water.png )  Rating \n   type = custom \n   ratingImage = { WATER_IMAGE } \n   ratingColor = #3498db \n   ratingBackgroundColor = #c8c7c8 \n   ratingCount = { 10 } \n   imageSize = { 30 } \n   onFinishRating = { this . ratingCompleted } \n   style = {{   paddingVertical :   10   }}  /", 
            "title": "Demo"
        }, 
        {
            "location": "/API/rating/#read-only-mode", 
            "text": "const   {   rating   }   =   this . props ;  Rating \n   imageSize = { 20 } \n   readonly \n   startingValue = { rating } \n   style = {{   styles . rating   }}  /", 
            "title": "Read-only mode"
        }, 
        {
            "location": "/API/rating/#fractions", 
            "text": "Rating   showRating   fractions = {1}   startingValue = {3.3}   /", 
            "title": "Fractions"
        }, 
        {
            "location": "/API/rating/#rating-props", 
            "text": "prop  default  type  description      onFinishRating  none  function  Callback method when the user finishes rating. Gives you the final rating value as a whole number  (required)    type  star  string  Choose one of the built-in types:  star ,  rocket ,  bell ,  heart  or use type  custom  to render a custom image (optional)    ratingImage  star  string  Pass in a custom image source; use this along with  type='custom'  prop above (optional)    ratingColor  #f1c40f  string (color)  Pass in a custom fill-color for the rating icon; use this along with  type='custom'  prop above (optional)    ratingBackgroundColor  white  string (color)  Pass in a custom background-fill-color for the rating icon; use this along with  type='custom'  prop above (optional)    ratingCount  5  number  The number of rating images to display (optional)    imageSize  50  number  The size of each rating image (optional)    showRating  none  boolean  Displays the Built-in Rating UI to show the rating value in real-time (optional)    readonly  false  boolean  Whether the rating can be modiefied by the user (optional)    startingValue  ratingCount / 2  number  The initial rating to render (optional)    fractions  undefined  number  The number of decimal places for the rating value; must be between 0 and 20 (optional)    style  none  function  Exposes style prop to add additonal styling to the container view (optional)", 
            "title": "Rating Props"
        }, 
        {
            "location": "/API/searchbar/", 
            "text": "Default SearchBar\n\n\n\n\nPlatform specific SearchBar\n\n\niOS\n\n\n\n\nAndroid\n\n\n\n\nimport\n \n{\n \nSearchBar\n \n}\n \nfrom\n \nreact-native-elements\n\n\n\nSearchBar\n\n  \nonChangeText\n=\n{\nsomeMethod\n}\n\n  \nonClearText\n=\n{\nsomeMethod\n}\n\n  \nplaceholder\n=\nType Here...\n \n/\n\n\n\nSearchBar\n\n  \nnoIcon\n\n  \nonChangeText\n=\n{\nsomeMethod\n}\n\n  \nonClearText\n=\n{\nsomeMethod\n}\n\n  \nplaceholder\n=\nType Here...\n \n/\n\n\n\nSearchBar\n\n  \nround\n\n  \nonChangeText\n=\n{\nsomeMethod\n}\n\n  \nonClearText\n=\n{\nsomeMethod\n}\n\n  \nplaceholder\n=\nType Here...\n \n/\n\n\n\nSearchBar\n\n  \nlightTheme\n\n  \nonChangeText\n=\n{\nsomeMethod\n}\n\n  \nonClearText\n=\n{\nsomeMethod\n}\n\n  \nplaceholder\n=\nType Here...\n \n/\n\n\n\nSearchBar\n\n  \nlightTheme\n\n  \nonChangeText\n=\n{\nsomeMethod\n}\n\n  \nonClearText\n=\n{\nsomeMethod\n}\n\n  \nicon\n=\n{{\n \ntype\n:\n \nfont-awesome\n,\n \nname\n:\n \nsearch\n \n}}\n\n  \nplaceholder\n=\nType Here...\n \n/\n\n\n\nSearchBar\n\n  \nshowLoading\n\n  \nplatform\n=\nios\n\n  \ncancelButtonTitle\n=\nCancel\n\n  \nplaceholder\n=\nSearch\n \n/\n\n\n\nSearchBar\n\n  \nshowLoading\n\n  \nplatform\n=\nandroid\n\n  \nplaceholder\n=\nSearch\n \n/\n\n\n\n\n\nSearchBar props\n\n\nThis component inherits \nall native TextInput props that come with a standard React Native TextInput element\n, along with the following:\n\n\n\n\n\n\n\n\nprop\n\n\ndefault\n\n\ntype\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nplatform\n\n\n\"default\"\n\n\nstring\n\n\nchoose the look and feel of the search bar. One of \"default\", \"ios\", \"android\"\n\n\n\n\n\n\ncancelButtonTitle\n\n\n\"Cancel\"\n\n\nstring\n\n\n(iOS only)\n title of the cancel button on the right side\n\n\n\n\n\n\ncontainerStyle\n\n\ninherited styling\n\n\nobject (style)\n\n\nstyle the container of the TextInput\n\n\n\n\n\n\ninputStyle\n\n\ninherited styling\n\n\nobject (style)\n\n\nstyle the TextInput\n\n\n\n\n\n\nicon\n\n\n{ type: 'material', color: '#86939e', name: 'search' }\n\n\nobject {type (string), name (string), color (string), style (object)}\n\n\nspecify type, name, color, and styling of the icon\n\n\n\n\n\n\nnoIcon\n\n\nfalse\n\n\nboolean\n\n\nremove icon from textinput\n\n\n\n\n\n\nlightTheme\n\n\nfalse\n\n\nboolean\n\n\nchange theme to light theme\n\n\n\n\n\n\nround\n\n\nfalse\n\n\nboolean\n\n\nchange TextInput styling to rounded corners\n\n\n\n\n\n\nunderlineColorAndroid\n\n\ntransparent\n\n\nstring (color)\n\n\nspecify other than the default transparent underline color\n\n\n\n\n\n\nloadingProps\n\n\n{ }\n\n\nobject\n\n\nprops passed to ActivityIndicator\n\n\n\n\n\n\nshowLoading\n\n\nfalse\n\n\nboolean\n\n\nshow the loading ActivityIndicator effect\n\n\n\n\n\n\nplaceholder\n\n\n''\n\n\nstring\n\n\nset the placeholder text\n\n\n\n\n\n\nplaceholderTextColor\n\n\n'#86939e'\n\n\nstring\n\n\nset the color of the placeholder text\n\n\n\n\n\n\nonChangeText\n\n\nnone\n\n\nfunction\n\n\nmethod to fire when text is changed\n\n\n\n\n\n\nonClearText\n\n\nnone\n\n\nfunction\n\n\nmethod to fire when text is cleared\n\n\n\n\n\n\nonCancel\n\n\nnull\n\n\nfunction\n\n\ncallback fired when pressing the cancel button (iOS) or the back icon (Android)\n\n\n\n\n\n\nclearIcon\n\n\n{ color: '#86939e', name: 'search' }\n\n\nobject {name (string), color (string), style (object)}\n\n\nspecify color, styling, or another \nMaterial Icon Name\n (Note: pressing on this icon clears text inside the searchbar)\n\n\n\n\n\n\n\n\nInteraction methods\n\n\n\n\n\n\n\n\nmethod\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nfocus\n\n\ncall focus on the textinput (\nexample\n)\n\n\n\n\n\n\nblur\n\n\ncall blur on the textinput (\nexample\n)\n\n\n\n\n\n\nclearText\n\n\ncall clear on the textinput (\nexample\n)\n\n\n\n\n\n\n\n\n Calling methods on SearchBar\n\n\nStore a reference to the SearchBar in your component by using the ref prop provided by React (\nsee docs\n):\n\nSearchBar\n\n  \nref\n=\n{\nsearch\n \n=\n \nthis\n.\nsearch\n \n=\n \nsearch\n}\n\n  \n...\n\n\n/\n\n\n\nYou can then access SearchBar methods like so:\n\n\nthis.search.focus();\nthis.search.blur();\nthis.search.clearText();", 
            "title": "Searchbar"
        }, 
        {
            "location": "/API/searchbar/#default-searchbar", 
            "text": "", 
            "title": "Default SearchBar"
        }, 
        {
            "location": "/API/searchbar/#platform-specific-searchbar", 
            "text": "iOS   Android   import   {   SearchBar   }   from   react-native-elements  SearchBar \n   onChangeText = { someMethod } \n   onClearText = { someMethod } \n   placeholder = Type Here...   /  SearchBar \n   noIcon \n   onChangeText = { someMethod } \n   onClearText = { someMethod } \n   placeholder = Type Here...   /  SearchBar \n   round \n   onChangeText = { someMethod } \n   onClearText = { someMethod } \n   placeholder = Type Here...   /  SearchBar \n   lightTheme \n   onChangeText = { someMethod } \n   onClearText = { someMethod } \n   placeholder = Type Here...   /  SearchBar \n   lightTheme \n   onChangeText = { someMethod } \n   onClearText = { someMethod } \n   icon = {{   type :   font-awesome ,   name :   search   }} \n   placeholder = Type Here...   /  SearchBar \n   showLoading \n   platform = ios \n   cancelButtonTitle = Cancel \n   placeholder = Search   /  SearchBar \n   showLoading \n   platform = android \n   placeholder = Search   /", 
            "title": "Platform specific SearchBar"
        }, 
        {
            "location": "/API/searchbar/#searchbar-props", 
            "text": "", 
            "title": "SearchBar props"
        }, 
        {
            "location": "/API/searchbar/#this-component-inherits-all-native-textinput-props-that-come-with-a-standard-react-native-textinput-element-along-with-the-following", 
            "text": "prop  default  type  description      platform  \"default\"  string  choose the look and feel of the search bar. One of \"default\", \"ios\", \"android\"    cancelButtonTitle  \"Cancel\"  string  (iOS only)  title of the cancel button on the right side    containerStyle  inherited styling  object (style)  style the container of the TextInput    inputStyle  inherited styling  object (style)  style the TextInput    icon  { type: 'material', color: '#86939e', name: 'search' }  object {type (string), name (string), color (string), style (object)}  specify type, name, color, and styling of the icon    noIcon  false  boolean  remove icon from textinput    lightTheme  false  boolean  change theme to light theme    round  false  boolean  change TextInput styling to rounded corners    underlineColorAndroid  transparent  string (color)  specify other than the default transparent underline color    loadingProps  { }  object  props passed to ActivityIndicator    showLoading  false  boolean  show the loading ActivityIndicator effect    placeholder  ''  string  set the placeholder text    placeholderTextColor  '#86939e'  string  set the color of the placeholder text    onChangeText  none  function  method to fire when text is changed    onClearText  none  function  method to fire when text is cleared    onCancel  null  function  callback fired when pressing the cancel button (iOS) or the back icon (Android)    clearIcon  { color: '#86939e', name: 'search' }  object {name (string), color (string), style (object)}  specify color, styling, or another  Material Icon Name  (Note: pressing on this icon clears text inside the searchbar)", 
            "title": "This component inherits all native TextInput props that come with a standard React Native TextInput element, along with the following:"
        }, 
        {
            "location": "/API/searchbar/#interaction-methods", 
            "text": "method  description      focus  call focus on the textinput ( example )    blur  call blur on the textinput ( example )    clearText  call clear on the textinput ( example )", 
            "title": "Interaction methods"
        }, 
        {
            "location": "/API/slider/", 
            "text": "A pure JavaScript \n component for react-native. It is a drop-in replacement for Slider.\n\n\n\n\nThis component is a forked implementation of  \nreact-native-slider\n. Also note that due to the nature of the platform, and the existence of breaking changes between React Native releases, this implementation currently only supports v0.26.0+\n\n\n\n\nimport\n \n{\n \nSlider\n \n}\n \nfrom\n \nreact-native-elements\n\n\n\nView\n \nstyle\n=\n{{\nflex\n:\n \n1\n,\n \nalignItems\n:\n \nstretch\n,\n \njustifyContent\n:\n \ncenter\n}}\n\n  \nSlider\n\n    \nvalue\n=\n{\nthis\n.\nstate\n.\nvalue\n}\n\n    \nonValueChange\n=\n{(\nvalue\n)\n \n=\n \nthis\n.\nsetState\n({\nvalue\n})}\n \n/\n\n  \nText\nValue\n:\n \n{\nthis\n.\nstate\n.\nvalue\n}\n/Text\n\n\n/View\n\n\n\n\n\nSlider Props\n\n\n\n\n\n\n\n\nprop\n\n\ntype\n\n\noptional\n\n\ndefault\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nvalue\n\n\nnumber\n\n\nYes\n\n\n0\n\n\nInitial value of the slider\n\n\n\n\n\n\ndisabled\n\n\nbool\n\n\nYes\n\n\nfalse\n\n\nIf true the user won't be able to move the slider\n\n\n\n\n\n\nminimumValue\n\n\nnumber\n\n\nYes\n\n\n0\n\n\nInitial minimum value of the slider\n\n\n\n\n\n\nmaximumValue\n\n\nnumber\n\n\nYes\n\n\n1\n\n\nInitial maximum value of the slider\n\n\n\n\n\n\nstep\n\n\nnumber\n\n\nYes\n\n\n0\n\n\nStep value of the slider. The value should be between 0 and maximumValue - minimumValue)\n\n\n\n\n\n\nminimumTrackTintColor\n\n\nstring\n\n\nYes\n\n\n'#3f3f3f'\n\n\nThe color used for the track to the left of the button\n\n\n\n\n\n\nmaximumTrackTintColor\n\n\nstring\n\n\nYes\n\n\n'#b3b3b3'\n\n\nThe color used for the track to the right of the button\n\n\n\n\n\n\nthumbTintColor\n\n\nstring\n\n\nYes\n\n\n'#343434'\n\n\nThe color used for the thumb\n\n\n\n\n\n\nthumbTouchSize\n\n\nobject\n\n\nYes\n\n\n{width: 40, height: 40}\n\n\nThe size of the touch area that allows moving the thumb. The touch area has the same center as the visible thumb. This allows to have a visually small thumb while still allowing the user to move it easily.\n\n\n\n\n\n\nonValueChange\n\n\nfunction\n\n\nYes\n\n\n\n\nCallback continuously called while the user is dragging the slider\n\n\n\n\n\n\nonSlidingStart\n\n\nfunction\n\n\nYes\n\n\n\n\nCallback called when the user starts changing the value (e.g. when the slider is pressed)\n\n\n\n\n\n\nonSlidingComplete\n\n\nfunction\n\n\nYes\n\n\n\n\nCallback called when the user finishes changing the value (e.g. when the slider is released)\n\n\n\n\n\n\nstyle\n\n\nstyle\n\n\nYes\n\n\n\n\nThe style applied to the slider container\n\n\n\n\n\n\ntrackStyle\n\n\nstyle\n\n\nYes\n\n\n\n\nThe style applied to the track\n\n\n\n\n\n\nthumbStyle\n\n\nstyle\n\n\nYes\n\n\n\n\nThe style applied to the thumb\n\n\n\n\n\n\ndebugTouchArea\n\n\nbool\n\n\nYes\n\n\nfalse\n\n\nSet this to true to visually see the thumb touch rect in green.\n\n\n\n\n\n\nanimateTransitions\n\n\nbool\n\n\nYes\n\n\nfalse\n\n\nSet to true if you want to use the default 'spring' animation\n\n\n\n\n\n\nanimationType\n\n\nstring\n\n\nYes\n\n\n'timing'\n\n\nSet to 'spring' or 'timing' to use one of those two types of animations with the default \nanimation properties\n.\n\n\n\n\n\n\nanimationConfig\n\n\nobject\n\n\nYes\n\n\nundefined\n\n\nUsed to configure the animation parameters.  These are the same parameters in the \nAnimated library\n.\n\n\n\n\n\n\norientation\n\n\nstring\n\n\nYes\n\n\n'horizontal'\n\n\nSet the orientation of the slider.", 
            "title": "Slider"
        }, 
        {
            "location": "/API/slider/#slider-props", 
            "text": "prop  type  optional  default  description      value  number  Yes  0  Initial value of the slider    disabled  bool  Yes  false  If true the user won't be able to move the slider    minimumValue  number  Yes  0  Initial minimum value of the slider    maximumValue  number  Yes  1  Initial maximum value of the slider    step  number  Yes  0  Step value of the slider. The value should be between 0 and maximumValue - minimumValue)    minimumTrackTintColor  string  Yes  '#3f3f3f'  The color used for the track to the left of the button    maximumTrackTintColor  string  Yes  '#b3b3b3'  The color used for the track to the right of the button    thumbTintColor  string  Yes  '#343434'  The color used for the thumb    thumbTouchSize  object  Yes  {width: 40, height: 40}  The size of the touch area that allows moving the thumb. The touch area has the same center as the visible thumb. This allows to have a visually small thumb while still allowing the user to move it easily.    onValueChange  function  Yes   Callback continuously called while the user is dragging the slider    onSlidingStart  function  Yes   Callback called when the user starts changing the value (e.g. when the slider is pressed)    onSlidingComplete  function  Yes   Callback called when the user finishes changing the value (e.g. when the slider is released)    style  style  Yes   The style applied to the slider container    trackStyle  style  Yes   The style applied to the track    thumbStyle  style  Yes   The style applied to the thumb    debugTouchArea  bool  Yes  false  Set this to true to visually see the thumb touch rect in green.    animateTransitions  bool  Yes  false  Set to true if you want to use the default 'spring' animation    animationType  string  Yes  'timing'  Set to 'spring' or 'timing' to use one of those two types of animations with the default  animation properties .    animationConfig  object  Yes  undefined  Used to configure the animation parameters.  These are the same parameters in the  Animated library .    orientation  string  Yes  'horizontal'  Set the orientation of the slider.", 
            "title": "Slider Props"
        }, 
        {
            "location": "/API/social_icons/", 
            "text": "import\n \n{\n \nSocialIcon\n \n}\n \nfrom\n \nreact-native-elements\n\n\n\n// Icon\n\n\nSocialIcon\n\n  \ntype\n=\ntwitter\n\n\n/\n\n\n\nSocialIcon\n\n  \nraised\n=\n{\nfalse\n}\n\n  \ntype\n=\ngitlab\n\n\n/\n\n\n\nSocialIcon\n\n  \nlight\n\n  \ntype\n=\nmedium\n\n\n/\n\n\n\nSocialIcon\n\n  \nlight\n\n  \nraised\n=\n{\nfalse\n}\n\n  \ntype\n=\nmedium\n\n\n/\n\n\n\n\n// Button\n\n\nSocialIcon\n\n  \ntitle\n=\nSign In With Facebook\n\n  \nbutton\n\n  \ntype\n=\nfacebook\n\n\n/\n\n\n\nSocialIcon\n\n  \ntitle\n=\nSome Twitter Message\n\n  \nbutton\n\n  \ntype\n=\ntwitter\n\n\n/\n\n\n\nSocialIcon\n\n  \nbutton\n\n  \ntype\n=\nmedium\n\n\n/\n\n\n\n\nSocialIcon\n\n  \nbutton\n\n  \nlight\n\n  \ntype\n=\ninstagram\n\n\n/\n\n\n\n\n\nSocialIcon props\n\n\n\n\n\n\n\n\nprop\n\n\ndefault\n\n\ntype\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\ntitle\n\n\nnone\n\n\nstring\n\n\ntitle if made into a button (optional)\n\n\n\n\n\n\ntype\n\n\nnone\n\n\nsocial media type (angellist, codepen, envelope, etsy, facebook, foursquare, github-alt, github, gitlab, instagram, linkedin, medium, pinterest, quora, reddit-alien, soundcloud, stack-overflow, steam, stumbleupon, tumblr, twitch, twitter,google-plus-official, vimeo, wordpress, youtube)\n\n\nsocial media type (required)\n\n\n\n\n\n\nraised\n\n\ntrue\n\n\nboolean\n\n\nraised adds a drop shadow, set to false to remove\n\n\n\n\n\n\nbutton\n\n\nfalse\n\n\nboolean\n\n\ncreates button (optional)\n\n\n\n\n\n\nonPress\n\n\nnone\n\n\nfunction\n\n\nonPress method (optional)\n\n\n\n\n\n\nonLongPress\n\n\nnone\n\n\nfunction\n\n\nonLongPress method (optional)\n\n\n\n\n\n\nlight\n\n\nfalse\n\n\nboolean\n\n\nreverses icon color scheme, setting background to white and icon to primary color\n\n\n\n\n\n\niconStyle\n\n\nnone\n\n\nobject (style)\n\n\nextra styling for icon component (optional)\n\n\n\n\n\n\nstyle\n\n\nnone\n\n\nobject (style)\n\n\nbutton styling (optional)\n\n\n\n\n\n\niconColor\n\n\nwhite\n\n\nstring\n\n\nicon color (optional)\n\n\n\n\n\n\nunderlayColor\n\n\nnone\n\n\nstring\n\n\nunderlay color (optional)\n\n\n\n\n\n\niconSize\n\n\n24\n\n\nnumber\n\n\nicon size (optional)\n\n\n\n\n\n\ncomponent\n\n\nTouchableHighlight\n\n\nReact Native Component\n\n\ntype of button (optional)\n\n\n\n\n\n\nfontFamily\n\n\nSystem font bold (iOS), Sans Serif Black (android)\n\n\nstring\n\n\nspecify different font family (optional)\n\n\n\n\n\n\nfontWeight\n\n\nbold (ios), black(android)\n\n\nstring\n\n\nspecify font weight of title if set as a button with a title\n\n\n\n\n\n\nfontStyle\n\n\nnone\n\n\nobject (style)\n\n\nspecify text styling (optional)\n\n\n\n\n\n\ndisabled\n\n\nfalse\n\n\nboolean\n\n\ndisable button (optional)\n\n\n\n\n\n\nloading\n\n\nfalse\n\n\nboolean\n\n\nshows loading indicator (optional)", 
            "title": "Social icons"
        }, 
        {
            "location": "/API/social_icons/#socialicon-props", 
            "text": "prop  default  type  description      title  none  string  title if made into a button (optional)    type  none  social media type (angellist, codepen, envelope, etsy, facebook, foursquare, github-alt, github, gitlab, instagram, linkedin, medium, pinterest, quora, reddit-alien, soundcloud, stack-overflow, steam, stumbleupon, tumblr, twitch, twitter,google-plus-official, vimeo, wordpress, youtube)  social media type (required)    raised  true  boolean  raised adds a drop shadow, set to false to remove    button  false  boolean  creates button (optional)    onPress  none  function  onPress method (optional)    onLongPress  none  function  onLongPress method (optional)    light  false  boolean  reverses icon color scheme, setting background to white and icon to primary color    iconStyle  none  object (style)  extra styling for icon component (optional)    style  none  object (style)  button styling (optional)    iconColor  white  string  icon color (optional)    underlayColor  none  string  underlay color (optional)    iconSize  24  number  icon size (optional)    component  TouchableHighlight  React Native Component  type of button (optional)    fontFamily  System font bold (iOS), Sans Serif Black (android)  string  specify different font family (optional)    fontWeight  bold (ios), black(android)  string  specify font weight of title if set as a button with a title    fontStyle  none  object (style)  specify text styling (optional)    disabled  false  boolean  disable button (optional)    loading  false  boolean  shows loading indicator (optional)", 
            "title": "SocialIcon props"
        }, 
        {
            "location": "/API/tile/", 
            "text": "A component with full size image and with text either inside the image or under the image along with customizable caption\n\n\n\n\nThis component was inspired from \nShoutem UI\n by \nShoutem\n. Check out \nShoutem\n if you haven't already!\n\n\n\n\nFeatured Tile\n\n\n\n\nTile\n\n   \nimageSrc\n=\n{{\nrequire\n:\n \n(\n./img/path\n)}}\n\n   \ntitle\n=\nLorem ipsum dolor sit amet, consectetur adipisicing elit. Dolores dolore exercitationem\n\n   \nfeatured\n\n   \ncaption\n=\nSome Caption Text\n\n\n/\n\n\n\n\n\nFeatured Tile with Icon\n\n\n\n\nTile\n\n  \nimageSrc\n=\n{{\nrequire\n:\n \n(\n./img/path\n)}}\n\n  \nicon\n=\n{{\nname\n:\n \nplay-circle\n,\n \ntype\n:\n \nfont-awesome\n}}\n\n  \nfeatured\n\n\n/\n\n\n\n\n\nTile with Icon\n\n\n\n\nTile\n\n  \nimageSrc\n=\n{{\nrequire\n:\n \n(\n./img/path\n)}}\n\n  \ntitle\n=\nLorem ipsum dolor sit amet, consectetur\n\n  \nicon\n=\n{{\nname\n:\n \nplay-circle\n,\n \ntype\n:\n \nfont-awesome\n}}\n  \n// optional\n\n  \ncontentContainerStyle\n=\n{{\nheight\n:\n \n70\n}}\n\n\n\n  \nView\n \nstyle\n=\n{{\nflex\n:\n \n1\n,\n \nflexDirection\n:\n \nrow\n,\n \njustifyContent\n:\n \nspace-between\n}}\n\n    \nText\nCaption\n/Text\n\n    \nText\nCaption\n/Text\n\n  \n/View\n\n\n/Tile\n\n\n\n\n\nTile Props\n\n\n\n\n\n\n\n\nprop\n\n\ndefault\n\n\ntype\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nicon\n\n\nnone\n\n\nobject {name: string, color: string, size: number, type: string (default is material, or choose one of material-community, simple-line-icon, zocial, font-awesome, octicon, ionicon, foundation, evilicon, or entypo), iconStyle: object(style)}\n\n\nIcon Component Props (optional)\n\n\n\n\n\n\niconContainerStyle\n\n\nnone\n\n\nobject (style)\n\n\nStyling for the outer icon container (optional)\n\n\n\n\n\n\ntitle\n\n\nnone\n\n\nstring\n\n\nText inside the tile (optional)\n\n\n\n\n\n\ntitleStyle\n\n\nnone\n\n\nobject (style)\n\n\nStyling for the title (optional)\n\n\n\n\n\n\ntitleNumberOfLines\n\n\nnone\n\n\nnumber\n\n\nNumber of lines for Title\n\n\n\n\n\n\ncaption\n\n\nnone\n\n\nstring\n\n\nText inside the tilt when tile is featured\n\n\n\n\n\n\ncaptionStyle\n\n\nnone\n\n\nobject (style)\n\n\nStyling for the caption (optional)\n\n\n\n\n\n\nfeatured\n\n\nfalse\n\n\nboolean\n\n\nChanges the look of the tile (optional)\n\n\n\n\n\n\ncontainerStyle\n\n\nnone\n\n\nobject (style)\n\n\nStyling for the outer tile container (optional)\n\n\n\n\n\n\nimageSrc\n\n\nnone\n\n\nobject (image)\n\n\nSource for the image (required)\n\n\n\n\n\n\nimageContainerStyle\n\n\nnone\n\n\nobject (style)\n\n\nStyling for the image (optional)\n\n\n\n\n\n\nonPress\n\n\nnone\n\n\nfunction (event)\n\n\nFunction to call when tile is pressed (optional)\n\n\n\n\n\n\nactiveOpacity\n\n\n0.2\n\n\nnumber\n\n\nNumber passed to control opacity on press (optional)\n\n\n\n\n\n\ncontentContainerStyle\n\n\nnone\n\n\nobject (style)\n\n\nStyling for bottom container when not featured tile (optional)\n\n\n\n\n\n\nwidth\n\n\nDevice Width\n\n\nnumber\n\n\nWidth for the tile (optional)\n\n\n\n\n\n\nheight\n\n\nDevice Width * 0.8\n\n\nnumber\n\n\nHeight for the tile", 
            "title": "Tile"
        }, 
        {
            "location": "/API/tile/#featured-tile", 
            "text": "Tile \n    imageSrc = {{ require :   ( ./img/path )}} \n    title = Lorem ipsum dolor sit amet, consectetur adipisicing elit. Dolores dolore exercitationem \n    featured \n    caption = Some Caption Text  /", 
            "title": "Featured Tile"
        }, 
        {
            "location": "/API/tile/#featured-tile-with-icon", 
            "text": "Tile \n   imageSrc = {{ require :   ( ./img/path )}} \n   icon = {{ name :   play-circle ,   type :   font-awesome }} \n   featured  /", 
            "title": "Featured Tile with Icon"
        }, 
        {
            "location": "/API/tile/#tile-with-icon", 
            "text": "Tile \n   imageSrc = {{ require :   ( ./img/path )}} \n   title = Lorem ipsum dolor sit amet, consectetur \n   icon = {{ name :   play-circle ,   type :   font-awesome }}    // optional \n   contentContainerStyle = {{ height :   70 }}  \n   View   style = {{ flex :   1 ,   flexDirection :   row ,   justifyContent :   space-between }} \n     Text Caption /Text \n     Text Caption /Text \n   /View  /Tile", 
            "title": "Tile with Icon"
        }, 
        {
            "location": "/API/tile/#tile-props", 
            "text": "prop  default  type  description      icon  none  object {name: string, color: string, size: number, type: string (default is material, or choose one of material-community, simple-line-icon, zocial, font-awesome, octicon, ionicon, foundation, evilicon, or entypo), iconStyle: object(style)}  Icon Component Props (optional)    iconContainerStyle  none  object (style)  Styling for the outer icon container (optional)    title  none  string  Text inside the tile (optional)    titleStyle  none  object (style)  Styling for the title (optional)    titleNumberOfLines  none  number  Number of lines for Title    caption  none  string  Text inside the tilt when tile is featured    captionStyle  none  object (style)  Styling for the caption (optional)    featured  false  boolean  Changes the look of the tile (optional)    containerStyle  none  object (style)  Styling for the outer tile container (optional)    imageSrc  none  object (image)  Source for the image (required)    imageContainerStyle  none  object (style)  Styling for the image (optional)    onPress  none  function (event)  Function to call when tile is pressed (optional)    activeOpacity  0.2  number  Number passed to control opacity on press (optional)    contentContainerStyle  none  object (style)  Styling for bottom container when not featured tile (optional)    width  Device Width  number  Width for the tile (optional)    height  Device Width * 0.8  number  Height for the tile", 
            "title": "Tile Props"
        }, 
        {
            "location": "/Installation/default_installation/", 
            "text": "Default Installation instructions\n\n\nIf your project is a standard React Native project created using \nreact-native init\n (it should have an ios/android directory), then follow these installation instructions:\n\n\nStep 1: Install react-native-vector-icons\n\n\nIf you already have installed \nreact-native-vector-icon\n as a dependency for your project you can skip this step. Otherwise run the following command:\n\n\nnpm i react-native-vector-icons --save \n react-native link react-native-vector-icons\n\n\nIf you have any issues installing react-native-vector-icons, check out their installation guide \nhere\n or debug it using \nthis issue\n.\n\n\nStep 2: Install react-native-elements\n\n\nyarn add react-native-elements\n\n\n\n\nor\n\n\nnpm i react-native-elements --save", 
            "title": "Default Installation instructions"
        }, 
        {
            "location": "/Installation/default_installation/#default-installation-instructions", 
            "text": "If your project is a standard React Native project created using  react-native init  (it should have an ios/android directory), then follow these installation instructions:", 
            "title": "Default Installation instructions"
        }, 
        {
            "location": "/Installation/default_installation/#step-1-install-react-native-vector-icons", 
            "text": "If you already have installed  react-native-vector-icon  as a dependency for your project you can skip this step. Otherwise run the following command:  npm i react-native-vector-icons --save   react-native link react-native-vector-icons  If you have any issues installing react-native-vector-icons, check out their installation guide  here  or debug it using  this issue .", 
            "title": "Step 1: Install react-native-vector-icons"
        }, 
        {
            "location": "/Installation/default_installation/#step-2-install-react-native-elements", 
            "text": "yarn add react-native-elements  or  npm i react-native-elements --save", 
            "title": "Step 2: Install react-native-elements"
        }, 
        {
            "location": "/Installation/using-with-crna-or-expo/", 
            "text": "Installation with create-react-native-app or Expo\n\n\nExpo\n or \ncreate-react-native-app\n projects include \nreact-native-vector-icons\n out of the box, so all you need to do\nis install \nreact-native-elements\n\n\nyarn add react-native-elements\n\n\nor\n\n\nnpm install react-native-elements --save\n\n\n\n\nNote:\n\n\nIf you see the \nUNMET PEER DEPENDENCY\n warning for \nreact-native-vector-icons\n like below, you can ignore it as \nreact-native-vector-icons\n is already installed by \nexpo\n or \ncrna\n.", 
            "title": "Installation with create-react-native-app or Expo"
        }, 
        {
            "location": "/Installation/using-with-crna-or-expo/#installation-with-create-react-native-app-or-expo", 
            "text": "Expo  or  create-react-native-app  projects include  react-native-vector-icons  out of the box, so all you need to do\nis install  react-native-elements  yarn add react-native-elements \nor  npm install react-native-elements --save  Note:  If you see the  UNMET PEER DEPENDENCY  warning for  react-native-vector-icons  like below, you can ignore it as  react-native-vector-icons  is already installed by  expo  or  crna .", 
            "title": "Installation with create-react-native-app or Expo"
        }
    ]
}